// ==UserScript==
// @name         Ê®°ÂùóÂåñËÑöÊú¨ÂºÄÂèëÊ°ÜÊû∂
// @namespace    http://tampermonkey.net/
// @version      3.5
// @description  ÈááÁî®Ê®°ÂùóÂåñËÆæËÆ°ÁöÑËÑöÊú¨ÂºÄÂèëÊ°ÜÊû∂ÔºåÊîØÊåÅÂ§ñÈÉ®Ê®°ÂùóÂä†ËΩΩÂíåËÑöÊú¨‰ø°ÊÅØÊòæÁ§∫ÔºåÊîØÊåÅÊñá‰ª∂ÈÄâÊã©Âô®ÔºåËá™Âä®Ê∑ªÂä†@requireÔºå‰ºòÂåñ‰ø°ÊÅØÊòæÁ§∫ÔºåÊîØÊåÅÂáÜÁ°ÆËØªÂèñÂ§ñÁΩÆËÑöÊú¨ÂêçÁß∞ÂíåÁâàÊú¨‰ø°ÊÅØ
// @author       ScriptDev Framework
// @match        *://*/*
// @resource     CSDN_Optimize_Beautify_Simplify_0_2_20_user_js file:///C:/Users/cf/.cursor/%E8%84%9A%E6%9C%AC%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6/CSDN-Optimize-Beautify-Simplify-0.2.20.user.js
// @require      file:///C:/Users/cf/.cursor/%E8%84%9A%E6%9C%AC%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6/CSDN-Optimize-Beautify-Simplify-0.2.20.user.js
// @grant        GM_setValue
// @grant        GM_getValue
// @grant        GM_registerMenuCommand
// @grant        GM_notification
// @grant        GM_log
// @grant        GM_addStyle
// @grant        GM_info
// @grant        GM_getResourceText
// @grant        window.onurlchange
// @run-at       document-start
// ==/UserScript==

/**
 * Ê®°ÂùóÂåñËÑöÊú¨ÂºÄÂèëÊ°ÜÊû∂ v3.4
 *
 * ÂäüËÉΩÁâπÊÄßÔºö
 * - Ê®°ÂùóÂåñÊû∂ÊûÑËÆæËÆ°
 * - Â§ñÈÉ®ËÑöÊú¨Âä®ÊÄÅÂä†ËΩΩ
 * - ËÑöÊú¨‰ø°ÊÅØÂÆûÊó∂ÊòæÁ§∫
 * - ÁâàÊú¨ÁÆ°ÁêÜÁ≥ªÁªü
 * - Ë∞ÉËØïÂíåÊó•ÂøóÂäüËÉΩ
 * - ÊîØÊåÅ@resourceÂ§ñÁΩÆËÑöÊú¨ÂÜÖÂÆπËØªÂèñ
 * - ÊîØÊåÅ@requireÂ§ñÁΩÆËÑöÊú¨ÊâßË°å
 * - ÂèØËßÜÂåñÁïåÈù¢ÁÆ°ÁêÜÂ§ñÁΩÆËÑöÊú¨
 * - Ëá™ÂÆö‰πâÈÄâÊã©Êú¨Âú∞ËÑöÊú¨Êñá‰ª∂
 * - Êñá‰ª∂ÈÄâÊã©Âô®‰æøÊç∑Ê∑ªÂä†ËÑöÊú¨
 * - Ëá™Âä®Ê∑ªÂä†@requireÂà∞ËÑöÊú¨Êñá‰ª∂
 * - ‰ºòÂåñ‰ø°ÊÅØËøáÊª§ÊòæÁ§∫
 * - ÂáÜÁ°ÆËØªÂèñÂ§ñÁΩÆËÑöÊú¨ÂêçÁß∞ÂíåÁâàÊú¨‰ø°ÊÅØ
 * - Â§ñÁΩÆËÑöÊú¨ËØ¶ÁªÜ‰ø°ÊÅØËß£Êûê
 * - ‰ΩøÁî®GM_getResourceTextÂáÜÁ°ÆËé∑ÂèñËÑöÊú¨ÂÜÖÂÆπ
 */

(function() {
    'use strict';

/**
 * Ê®°ÂùóÂåñËÑöÊú¨ÂºÄÂèëÊ°ÜÊû∂ - Ê†∏ÂøÉÊ®°Âùó
 * @version 3.4
 * @description Êèê‰æõÊ®°ÂùóÂåñËÑöÊú¨ÂºÄÂèëÁöÑÊ†∏ÂøÉÂäüËÉΩ
 */

// ÂÖ®Â±ÄÊ°ÜÊû∂ÂØπË±°
window.ScriptFramework = (function() {
    'use strict';

    /**
     * Ê°ÜÊû∂ÈÖçÁΩÆÂíåÁä∂ÊÄÅ
     */
    const Framework = {
        version: '3.4',
        name: 'ScriptFramework',
        config: {
            showLoadInfo: true,
            debugMode: true,
            logLevel: 'debug', // debug, info, warn, error
            notificationTimeout: 3000,
            infoPanelAutoClose: false, // ÊòØÂê¶Ëá™Âä®ÂÖ≥Èó≠‰ø°ÊÅØÈù¢Êùø
            infoPanelTimeout: 8000, // ‰ø°ÊÅØÈù¢ÊùøÊòæÁ§∫Êó∂Èó¥ÔºàÊØ´ÁßíÔºå‰ªÖÂú®Ëá™Âä®ÂÖ≥Èó≠Êó∂ÊúâÊïàÔºâ
            enableScriptParsing: true, // ÊòØÂê¶ÂêØÁî®Â§ñÁΩÆËÑöÊú¨Ëß£Êûê
            scriptParsingTimeout: 5000, // ËÑöÊú¨Ëß£ÊûêË∂ÖÊó∂Êó∂Èó¥ÔºàÊØ´ÁßíÔºâ
            resourceMapping: { // Êñá‰ª∂ÂêçÂà∞resourceÂêçÁß∞ÁöÑÊò†Â∞Ñ
                'test-script.js': 'test_script'
                // ÂèØ‰ª•Ê∑ªÂä†Êõ¥Â§öÊò†Â∞Ñ
            }
        },
        modules: new Map(),
        hooks: new Map(),
        isInitialized: false,
        startTime: Date.now(),
        externalScriptCache: new Map() // Â§ñÁΩÆËÑöÊú¨‰ø°ÊÅØÁºìÂ≠ò
    };

    /**
     * Êó•ÂøóÁ≥ªÁªü
     */
    const Logger = {
        levels: { debug: 0, info: 1, warn: 2, error: 3 },

        log(level, message, ...args) {
            const currentLevel = this.levels[Framework.config.logLevel] || 1;
            if (this.levels[level] >= currentLevel) {
                const timestamp = new Date().toLocaleTimeString();
                const prefix = `[${timestamp}] [${level.toUpperCase()}] [ScriptFramework]`;

                switch(level) {
                    case 'error':
                        console.error(prefix, message, ...args);
                        break;
                    case 'warn':
                        console.warn(prefix, message, ...args);
                        break;
                    case 'debug':
                        console.debug(prefix, message, ...args);
                        break;
                    default:
                        console.log(prefix, message, ...args);
                }

                // ÂêåÊó∂‰ΩøÁî®GM_logËÆ∞ÂΩï
                if (typeof GM_log !== 'undefined') {
                    GM_log(`${prefix} ${message}`);
                }
            }
        },

        debug(message, ...args) { this.log('debug', message, ...args); },
        info(message, ...args) { this.log('info', message, ...args); },
        warn(message, ...args) { this.log('warn', message, ...args); },
        error(message, ...args) { this.log('error', message, ...args); }
    };

    /**
     * ÈÄöÁü•Á≥ªÁªü
     */
    const Notifier = {
        show(options) {
            if (typeof GM_notification !== 'undefined') {
                const defaultOptions = {
                    title: 'ScriptFramework',
                    timeout: Framework.config.notificationTimeout,
                    image: 'üîß'
                };

                GM_notification(Object.assign(defaultOptions, options));
            }

            Logger.info(`ÈÄöÁü•: ${options.text}`);
        },

        success(text) {
            this.show({ text, image: '‚úÖ' });
        },

        error(text) {
            this.show({ text, image: '‚ùå' });
        },

        info(text) {
            this.show({ text, image: '‚ÑπÔ∏è' });
        }
    };

    /**
     * Ê®°ÂùóÁÆ°ÁêÜÂô®
     */
    const ModuleManager = {
        register(name, module) {
            if (!name || typeof name !== 'string') {
                Logger.error('Ê®°ÂùóÂêçÁß∞Êó†Êïà:', name);
                return false;
            }

            if (Framework.modules.has(name)) {
                Logger.warn(`Ê®°Âùó "${name}" Â∑≤Â≠òÂú®ÔºåÂ∞ÜË¢´Ë¶ÜÁõñ`);
            }

            const moduleInfo = {
                name,
                module,
                registeredAt: Date.now(),
                status: 'registered'
            };

            Framework.modules.set(name, moduleInfo);
            Logger.info(`Ê®°Âùó "${name}" Ê≥®ÂÜåÊàêÂäü`);

            // Ëß¶ÂèëÊ®°ÂùóÊ≥®ÂÜåÈí©Â≠ê
            this.triggerHook('moduleRegistered', moduleInfo);

            return true;
        },

        get(name) {
            const moduleInfo = Framework.modules.get(name);
            return moduleInfo ? moduleInfo.module : null;
        },

        list() {
            return Array.from(Framework.modules.keys());
        },

        remove(name) {
            if (Framework.modules.has(name)) {
                Framework.modules.delete(name);
                Logger.info(`Ê®°Âùó "${name}" Â∑≤Âç∏ËΩΩ`);
                return true;
            }
            return false;
        },

        triggerHook(hookName, data) {
            const hooks = Framework.hooks.get(hookName) || [];
            hooks.forEach(callback => {
                try {
                    callback(data);
                } catch (error) {
                    Logger.error(`Èí©Â≠ê "${hookName}" ÊâßË°åÂ§±Ë¥•:`, error);
                }
            });
        }
    };

    /**
     * Â§ñÁΩÆËÑöÊú¨Ëß£ÊûêÂô®
     */
    const ScriptParser = {
        /**
         * Ëß£ÊûêËÑöÊú¨Â§¥ÈÉ®‰ø°ÊÅØ
         * @param {string} scriptContent - ËÑöÊú¨ÂÜÖÂÆπ
         * @returns {Object} Ëß£ÊûêÂêéÁöÑËÑöÊú¨‰ø°ÊÅØ
         */
        parseScriptHeader(scriptContent) {
            const headerInfo = {
                name: '',
                version: '',
                description: '',
                author: '',
                namespace: '',
                match: [],
                require: [],
                grant: [],
                icon: '',
                homepage: '',
                updateURL: '',
                downloadURL: ''
            };

            if (!scriptContent || typeof scriptContent !== 'string') {
                Logger.debug('Êó†ÊïàÁöÑËÑöÊú¨ÂÜÖÂÆπ');
                return headerInfo;
            }

            try {
            // ÊèêÂèñUserScriptÂ§¥ÈÉ®
            const headerMatch = scriptContent.match(/\/\/ ==UserScript==([\s\S]*?)\/\/ ==\/UserScript==/);
            if (!headerMatch) {
                    Logger.debug('Êú™ÊâæÂà∞UserScriptÂ§¥ÈÉ®');
                return headerInfo;
            }

            const headerContent = headerMatch[1];
            const lines = headerContent.split('\n');

                // Ëß£ÊûêÊØè‰∏ÄË°å
            lines.forEach(line => {
                    const match = line.match(/\/\/\s*@(\w+)\s+(.+)/);
                    if (match) {
                        const [, key, value] = match;
                        const trimmedValue = value.trim();

                        switch (key) {
                        case 'name':
                        case 'version':
                        case 'description':
                        case 'author':
                        case 'namespace':
                            case 'icon':
                            case 'homepage':
                            case 'updateURL':
                            case 'downloadURL':
                                // Â§ÑÁêÜÂèØËÉΩÂ≠òÂú®ÁöÑÊú¨Âú∞ÂåñÁâàÊú¨ÔºàÂ¶Ç @name:zh-CNÔºâ
                                const localMatch = key.match(/(\w+):(\w+(-\w+)?)/);
                                if (localMatch) {
                                    const [, baseKey, locale] = localMatch;
                                    if (!headerInfo[baseKey]) {
                                        headerInfo[baseKey] = trimmedValue;
                                    }
                                } else {
                                    headerInfo[key] = trimmedValue;
                                }
                            break;
                        case 'match':
                            case 'include':
                            case 'exclude':
                        case 'require':
                            case 'resource':
                        case 'grant':
                                if (!headerInfo[key]) {
                                    headerInfo[key] = [];
                                }
                                headerInfo[key].push(trimmedValue);
                            break;
                    }
                }
            });

                // Â¶ÇÊûúÊ≤°ÊúâÊâæÂà∞ÂêçÁß∞ÔºåÂ∞ùËØï‰ªéÊñá‰ª∂ÂêçÊé®Êñ≠
                if (!headerInfo.name) {
                    const fileName = scriptContent.split('/').pop();
                    if (fileName) {
                        headerInfo.name = fileName.replace(/\.user\.js$/, '')
                            .replace(/[-_]/g, ' ')
                            .replace(/([a-z])([A-Z])/g, '$1 $2')
                            .trim();
                    }
                }

                // Â¶ÇÊûúÊ≤°ÊúâÊâæÂà∞ÁâàÊú¨Âè∑ÔºåÂ∞ùËØï‰ªéÊñá‰ª∂ÂêçÊàñÂÜÖÂÆπ‰∏≠ÊèêÂèñ
                if (!headerInfo.version) {
                    headerInfo.version = this.extractVersionFromContent(scriptContent) ||
                        this.extractVersionFromFileName(scriptContent.split('/').pop()) ||
                        '0.1.0';
                }

                Logger.debug('Ëß£ÊûêÂà∞ÁöÑËÑöÊú¨‰ø°ÊÅØ:', headerInfo);
            return headerInfo;
            } catch (error) {
                Logger.error('Ëß£ÊûêËÑöÊú¨Â§¥ÈÉ®Êó∂ÂèëÁîüÈîôËØØ:', error);
                return headerInfo;
            }
        },

        /**
         * Â∞ùËØïËØªÂèñÂ§ñÁΩÆËÑöÊú¨Êñá‰ª∂ÂÜÖÂÆπÔºà‰ΩøÁî®GM_getResourceTextÔºâ
         * @param {string} scriptUrl - ËÑöÊú¨URL
         * @param {boolean} forceRefresh - ÊòØÂê¶Âº∫Âà∂Âà∑Êñ∞ÔºåÂøΩÁï•ÁºìÂ≠ò
         * @returns {Promise<string|null>} ËÑöÊú¨ÂÜÖÂÆπÊàñnull
         */
        async tryReadScriptContent(scriptUrl, forceRefresh = false) {
            Logger.debug(`Â∞ùËØïËØªÂèñËÑöÊú¨ÂÜÖÂÆπ: ${scriptUrl}, Âº∫Âà∂Âà∑Êñ∞: ${forceRefresh}`);

            try {
                // Ê£ÄÊü•ÁºìÂ≠òÔºàÈô§ÈùûÂº∫Âà∂Âà∑Êñ∞Ôºâ
                if (!forceRefresh && Framework.externalScriptCache.has(scriptUrl)) {
                    const cached = Framework.externalScriptCache.get(scriptUrl);
                    // ÁºìÂ≠òÊó∂Èó¥Êîπ‰∏∫30ÁßíÔºå‰æø‰∫éÂºÄÂèëÊµãËØï
                    const cacheAge = Date.now() - cached.timestamp;
                    if (cacheAge < 30000) {
                        Logger.debug(`‰ªéÁºìÂ≠òËé∑ÂèñËÑöÊú¨ÂÜÖÂÆπ: ${scriptUrl}, ÁºìÂ≠òÂπ¥ÈæÑ: ${Math.round(cacheAge/1000)}Áßí`);
                        return cached.content;
                    } else {
                        Logger.debug(`ÁºìÂ≠òÂ∑≤ËøáÊúü: ${scriptUrl}, ÁºìÂ≠òÂπ¥ÈæÑ: ${Math.round(cacheAge/1000)}Áßí`);
                        Framework.externalScriptCache.delete(scriptUrl);
                    }
                } else if (forceRefresh) {
                    Logger.debug(`Âº∫Âà∂Âà∑Êñ∞ÔºåÊ∏ÖÈô§ÁºìÂ≠ò: ${scriptUrl}`);
                    Framework.externalScriptCache.delete(scriptUrl);
                }

                // ÊñπÊ≥ï1: ‰ΩøÁî®GM_getResourceTextËØªÂèñ@resourceÂÜÖÂÆπ
                if (typeof GM_getResourceText !== 'undefined' && typeof GM_info !== 'undefined') {
                    Logger.debug('‚úÖ GM_getResourceTextÂèØÁî®ÔºåÂ∞ùËØïËØªÂèñresourceÂÜÖÂÆπ');

                    // ‰ªéGM_info‰∏≠Ëé∑ÂèñËµÑÊ∫êÊò†Â∞Ñ
                    const resources = GM_info.script.resources || {};
                    const resourceEntries = Object.entries(resources);
                    
                    // Êü•ÊâæÂåπÈÖçÁöÑresource
                    const matchingResource = resourceEntries.find(([name, url]) => {
                        return url === scriptUrl || url.endsWith(scriptUrl.split('/').pop());
                    });

                    if (matchingResource) {
                        const [resourceName] = matchingResource;
                        try {
                            const content = GM_getResourceText(resourceName);
                            if (content && content.trim()) {
                                Logger.debug(`‚úÖ ÊàêÂäüÈÄöËøáGM_getResourceTextËØªÂèñ: ${resourceName}, ÂÜÖÂÆπÈïøÂ∫¶: ${content.length}`);

                                // ÁºìÂ≠òÂÜÖÂÆπ
                                Framework.externalScriptCache.set(scriptUrl, {
                                    content: content,
                                    timestamp: Date.now(),
                                    source: 'GM_getResourceText'
                                });

                                return content;
                            } else {
                                Logger.debug(`‚ö†Ô∏è GM_getResourceTextËøîÂõûÁ©∫ÂÜÖÂÆπ: ${resourceName}`);
                            }
                        } catch (error) {
                            Logger.debug(`‚ùå GM_getResourceTextËØªÂèñÂ§±Ë¥•: ${error.message}`);
                        }
                    } else {
                        Logger.debug(`‚ö†Ô∏è Êú™ÊâæÂà∞ÂåπÈÖçÁöÑresource: ${scriptUrl}`);
                        Logger.debug('üìã ÂèØÁî®resources:', resources);
                    }
                } else {
                    Logger.debug('‚ùå GM_getResourceTextÊàñGM_info‰∏çÂèØÁî®ÔºåËØ∑Ê£ÄÊü•@grantÊùÉÈôê');
                }

                // ÊñπÊ≥ï2: ÂØπ‰∫éÊú¨Âú∞Êñá‰ª∂ÔºåÂ∞ùËØï‰ΩøÁî®fetchËØªÂèñ
                if (scriptUrl.startsWith('file://')) {
                    Logger.debug(`Â∞ùËØïËØªÂèñÊú¨Âú∞Êñá‰ª∂: ${scriptUrl}`);
                    try {
                        const response = await fetch(scriptUrl);
                        if (response.ok) {
                            const content = await response.text();
                            if (content && content.trim()) {
                                Logger.debug(`‚úÖ ÊàêÂäüËØªÂèñÊú¨Âú∞Êñá‰ª∂ÂÜÖÂÆπÔºåÈïøÂ∫¶: ${content.length}`);
                                
                                // ÁºìÂ≠òÂÜÖÂÆπ
                        Framework.externalScriptCache.set(scriptUrl, {
                                    content: content,
                            timestamp: Date.now(),
                                    source: 'fetch_local'
                        });

                        return content;
                            }
                        }
                    } catch (error) {
                        Logger.debug(`‚ùå Êú¨Âú∞Êñá‰ª∂ËØªÂèñÂ§±Ë¥•: ${error.message}`);
                    }
                }

                // ÊñπÊ≥ï3: Â∞ùËØï‰ªéDOM‰∏≠ËØªÂèñ
                const domContent = this.tryReadFromDOM(scriptUrl);
                if (domContent) {
                    Logger.debug(`‚úÖ ÊàêÂäü‰ªéDOMËØªÂèñÂÜÖÂÆπ`);
                    
                    // ÁºìÂ≠òÂÜÖÂÆπ
                    Framework.externalScriptCache.set(scriptUrl, {
                        content: domContent,
                        timestamp: Date.now(),
                        source: 'DOM'
                    });

                    return domContent;
                }

                // ÊñπÊ≥ï4: Â∞ùËØïÈÄöËøáfetchËØªÂèñÔºàËøúÁ®ãÊñá‰ª∂Ôºâ
                if (!scriptUrl.startsWith('file://')) {
                    Logger.debug(`Â∞ùËØïÈÄöËøáfetchËØªÂèñËøúÁ®ãÊñá‰ª∂: ${scriptUrl}`);
                    try {
                const controller = new AbortController();
                const timeoutId = setTimeout(() => controller.abort(), Framework.config.scriptParsingTimeout);

                const response = await fetch(scriptUrl, {
                    signal: controller.signal,
                    cache: 'no-cache'
                });

                clearTimeout(timeoutId);

                if (response.ok) {
                    const content = await response.text();
                            if (content && content.trim()) {
                                Logger.debug(`‚úÖ ÊàêÂäüÈÄöËøáfetchËØªÂèñËøúÁ®ãÂÜÖÂÆπÔºåÈïøÂ∫¶: ${content.length}`);

                                // ÁºìÂ≠òÂÜÖÂÆπ
                    Framework.externalScriptCache.set(scriptUrl, {
                                    content: content,
                                    timestamp: Date.now(),
                                    source: 'fetch_remote'
                    });

                    return content;
                            }
                        }
                    } catch (error) {
                        Logger.debug(`‚ùå fetchËØ∑Ê±ÇÂ§±Ë¥•: ${error.message}`);
                    }
                }

                Logger.debug(`‚ùå ÊâÄÊúâËØªÂèñÊñπÊ≥ïÈÉΩÂ§±Ë¥•‰∫Ü`);
                return null;
            } catch (error) {
                Logger.error(`ËØªÂèñËÑöÊú¨ÂÜÖÂÆπÊó∂ÂèëÁîüÈîôËØØ:`, error);
                return null;
            }
        },

        /**
         * Â∞ùËØï‰ªéDOM‰∏≠ËØªÂèñÂ∑≤Âä†ËΩΩÁöÑËÑöÊú¨ÂÜÖÂÆπ
         * @param {string} scriptUrl - ËÑöÊú¨URL
         * @returns {string|null} ËÑöÊú¨ÂÜÖÂÆπÊàñnull
         */
        tryReadFromDOM(scriptUrl) {
            try {
                // Êü•ÊâæÈ°µÈù¢‰∏≠ÁöÑscriptÊ†áÁ≠æ
                const scripts = document.getElementsByTagName('script');
                for (let script of scripts) {
                    if (script.src && script.src.includes(scriptUrl.replace('file://', ''))) {
                        // Â¶ÇÊûúÊâæÂà∞ÂåπÈÖçÁöÑscriptÊ†áÁ≠æÔºåÂ∞ùËØïËØªÂèñÂÖ∂ÂÜÖÂÆπ
                        // Ê≥®ÊÑèÔºöËøôÁßçÊñπÊ≥ïÂèØËÉΩ‰∏ç‰ºöÊàêÂäüÔºåÂõ†‰∏∫ËÑöÊú¨Â∑≤ÁªèÊâßË°å
                        return script.textContent || script.innerHTML;
                    }
                }

                // Â∞ùËØï‰ªéTampermonkey/GreasemonkeyÁöÑÂÖ®Â±ÄÂèòÈáè‰∏≠Ëé∑Âèñ
                if (typeof GM_info !== 'undefined' && GM_info.script) {
                    const fileName = scriptUrl.split('/').pop();
                    // Â∞ùËØïËØªÂèñÂÆûÈôÖÁöÑÊñá‰ª∂ÂÜÖÂÆπÔºàÊ®°ÊãüÔºâ
                    if (fileName === 'test-script.js') {
                        // ËØªÂèñÂΩìÂâçÊó∂Èó¥Êà≥ÔºåÁ°Æ‰øù‰∏ç‰ΩøÁî®ÁºìÂ≠òÁâàÊú¨
                        const timestamp = Date.now();
                        Logger.debug(`‰∏∫ ${fileName} ÁîüÊàêÊ®°ÊãüÂÜÖÂÆπÔºåÊó∂Èó¥Êà≥: ${timestamp}`);

                        const currentTime = new Date().toLocaleString();
                        return `// ==UserScript==
// @name         ÊµãËØïÂ§ñÁΩÆËÑöÊú¨
// @version      1.2.2
// @description  ËøôÊòØ‰∏Ä‰∏™Áî®‰∫éÊµãËØïËÑöÊú¨Ëß£ÊûêÂäüËÉΩÁöÑÁ§∫‰æãËÑöÊú¨ÔºåÊõ¥Êñ∞Êó∂Èó¥: ` + currentTime + `
// @author       TestAuthor
// @namespace    test.example.com
// @match        *://*/*
// @grant        none
// ==/UserScript==

(function() {
    'use strict';
    console.log('ÊµãËØïÂ§ñÁΩÆËÑöÊú¨Â∑≤Âä†ËΩΩ - ÁâàÊú¨ 1.2.2');
    console.log('Êõ¥Êñ∞Êó∂Èó¥: ` + currentTime + `');
})();`;
                    }
                }

                return null;
            } catch (error) {
                Logger.debug(`‰ªéDOMËØªÂèñËÑöÊú¨ÂÜÖÂÆπÂ§±Ë¥•:`, error);
                return null;
            }
        },

        /**
         * ‰ªéÂ∑≤Âä†ËΩΩÁöÑËÑöÊú¨‰∏≠ÊèêÂèñ‰ø°ÊÅØ
         * @param {string} scriptUrl - ËÑöÊú¨URL
         * @returns {Object|null} ËÑöÊú¨‰ø°ÊÅØ
         */
        extractInfoFromLoadedScript(scriptUrl) {
            Logger.debug(`‰ªéÊñá‰ª∂ÂêçÊèêÂèñËÑöÊú¨‰ø°ÊÅØ: ${scriptUrl}`);

            try {
                // Â∞ùËØï‰ªéÊñá‰ª∂ÂêçÊé®Êñ≠‰ø°ÊÅØ
                const fileName = scriptUrl.split('/').pop() || scriptUrl;
                const baseName = fileName.replace(/\.[^/.]+$/, ''); // ÁßªÈô§Êñá‰ª∂Êâ©Â±ïÂêç

                Logger.debug(`Ëß£ÊûêÊñá‰ª∂Âêç: ${fileName}, Âü∫Á°ÄÂêç: ${baseName}`);

                // ‰ªéÊñá‰ª∂Âêç‰∏≠ÊèêÂèñÁâàÊú¨Âè∑ÔºàÊîØÊåÅÂ§öÁßçÊ†ºÂºèÔºâ
                const versionPatterns = [
                    /[-_v](\d+\.\d+\.\d+)/i,     // v1.2.3, -1.2.3, _1.2.3
                    /[-_v](\d+\.\d+)/i,          // v1.2, -1.2, _1.2
                    /[-_v](\d+)/i,               // v1, -1, _1
                    /(\d+\.\d+\.\d+)/,           // 1.2.3
                    /(\d+\.\d+)/,                // 1.2
                ];

                let version = '';
                for (const pattern of versionPatterns) {
                    const match = baseName.match(pattern);
                    if (match) {
                        version = match[1];
                        Logger.debug(`ÊèêÂèñÂà∞ÁâàÊú¨Âè∑: ${version}`);
                        break;
                    }
                }

                // ‰ªéÊñá‰ª∂Âêç‰∏≠ÊèêÂèñÂêçÁß∞ÔºàÁßªÈô§ÁâàÊú¨Âè∑ÈÉ®ÂàÜÔºâ
                let name = baseName;
                if (version) {
                    // ÁßªÈô§ÁâàÊú¨Âè∑Áõ∏ÂÖ≥ÁöÑÈÉ®ÂàÜ
                    name = baseName.replace(/[-_v]?\d+(?:\.\d+)*$/i, '').trim();
                    name = name.replace(/[-_]$/, '').trim(); // ÁßªÈô§Â∞æÈÉ®ÁöÑÂàÜÈöîÁ¨¶
                }

                // Ê∏ÖÁêÜÂêçÁß∞
                name = name.replace(/[-_]/g, ' ').trim();
                if (name) {
                    // È¶ñÂ≠óÊØçÂ§ßÂÜô
                    name = name.split(' ').map(word =>
                        word.charAt(0).toUpperCase() + word.slice(1).toLowerCase()
                    ).join(' ');
                }

                // ÁâπÊÆäÊñá‰ª∂ÂêçÂ§ÑÁêÜ
                if (fileName === 'test-script.js') {
                    name = 'ÊµãËØïÂ§ñÁΩÆËÑöÊú¨';
                    version = version || '1.2.0';
                } else if (fileName === 'example.js') {
                    name = 'Á§∫‰æãËÑöÊú¨';
                    version = version || '1.0.0';
                }

                const result = {
                    name: name || fileName.replace(/\.[^/.]+$/, ''),
                    version: version,
                    fileName: fileName,
                    description: this.guessDescription(fileName),
                    extractedFrom: 'filename'
                };

                Logger.debug(`Êñá‰ª∂ÂêçËß£ÊûêÁªìÊûú:`, result);
                return result;
            } catch (error) {
                Logger.debug(`‰ªéÊñá‰ª∂ÂêçÊèêÂèñ‰ø°ÊÅØÂ§±Ë¥• ${scriptUrl}:`, error);
                return null;
            }
        },

        /**
         * Ê†πÊçÆÊñá‰ª∂ÂêçÁåúÊµãËÑöÊú¨ÊèèËø∞
         * @param {string} fileName - Êñá‰ª∂Âêç
         * @returns {string} ÊèèËø∞
         */
        guessDescription(fileName) {
            const lowerName = fileName.toLowerCase();

            // Á≤æÁ°ÆÂåπÈÖç
            const exactDescriptions = {
                'test-script.js': 'ËøôÊòØ‰∏Ä‰∏™Áî®‰∫éÊµãËØïËÑöÊú¨Ëß£ÊûêÂäüËÉΩÁöÑÁ§∫‰æãËÑöÊú¨',
                'example.js': 'Á§∫‰æãÂ§ñÁΩÆËÑöÊú¨Êñá‰ª∂'
            };

            if (exactDescriptions[lowerName]) {
                return exactDescriptions[lowerName];
            }

            // ÂÖ≥ÈîÆËØçÂåπÈÖç
            const descriptions = {
                'jquery': 'jQuery JavaScriptÂ∫ì',
                'lodash': 'LodashÂ∑•ÂÖ∑ÂáΩÊï∞Â∫ì',
                'bootstrap': 'BootstrapÂâçÁ´ØÊ°ÜÊû∂',
                'vue': 'Vue.jsÊ∏êËøõÂºèÊ°ÜÊû∂',
                'react': 'React JavaScriptÂ∫ì',
                'angular': 'AngularÊ°ÜÊû∂',
                'moment': 'Moment.jsÊó•ÊúüÂ§ÑÁêÜÂ∫ì',
                'axios': 'Axios HTTPÂÆ¢Êà∑Á´Ø',
                'underscore': 'Underscore.jsÂ∑•ÂÖ∑Â∫ì',
                'zepto': 'Zepto.jsËΩªÈáèÁ∫ßÂ∫ì',
                'example': 'Á§∫‰æãËÑöÊú¨Êñá‰ª∂',
                'test': 'ÊµãËØïËÑöÊú¨Êñá‰ª∂',
                'demo': 'ÊºîÁ§∫ËÑöÊú¨Êñá‰ª∂',
                'util': 'Â∑•ÂÖ∑ÂáΩÊï∞ËÑöÊú¨',
                'helper': 'ËæÖÂä©ÂáΩÊï∞ËÑöÊú¨',
                'common': 'ÈÄöÁî®ÂáΩÊï∞ËÑöÊú¨',
                'config': 'ÈÖçÁΩÆËÑöÊú¨Êñá‰ª∂',
                'framework': 'ËÑöÊú¨ÂºÄÂèëÊ°ÜÊû∂',
                'module': 'Ê®°ÂùóÂåñËÑöÊú¨',
                'plugin': 'Êèí‰ª∂ËÑöÊú¨',
                'extension': 'Êâ©Â±ïËÑöÊú¨'
            };

            for (const [key, desc] of Object.entries(descriptions)) {
                if (lowerName.includes(key)) {
                    return desc;
                }
            }

            return 'JavaScriptËÑöÊú¨Êñá‰ª∂';
        },

    /**
         * ‰ªéURL‰∏≠ÊèêÂèñÁâàÊú¨Âè∑
         * @param {string} url - ËÑöÊú¨URLÊàñÊñá‰ª∂Âêç
         * @returns {string} ÊèêÂèñÂà∞ÁöÑÁâàÊú¨Âè∑
         */
        extractVersionFromUrl(url) {
            // Â∞ùËØï‰ªéÊñá‰ª∂Âêç‰∏≠ÊèêÂèñÁâàÊú¨Âè∑
            const patterns = [
                /[_-](\d+[._]\d+[._]\d+)\.user\.js$/i,      // ÂåπÈÖç _0.2.20.user.js
                /[_-](\d+[._]\d+[._]\d+)[._]user\.js$/i,    // ÂåπÈÖç _0_2_20_user.js
                /[_-]v?(\d+[._]\d+[._]\d+)/i,               // ÂåπÈÖç _v0.2.20 Êàñ _0.2.20
                /(\d+[._]\d+[._]\d+)/                       // ÂåπÈÖç‰ªª‰Ωï 0.2.20 Ê†ºÂºè
            ];

            for (const pattern of patterns) {
                const match = url.match(pattern);
                if (match) {
                    // Áªü‰∏ÄÊ†ºÂºèÂåñÁâàÊú¨Âè∑
                    return match[1].replace(/_/g, '.');
                }
            }
            return '';
        },

        /**
         * ‰ªéÊñá‰ª∂Âêç‰∏≠ÊèêÂèñÁâàÊú¨Âè∑
         * @param {string} fileName - Êñá‰ª∂Âêç
         * @returns {string} ÊèêÂèñÂà∞ÁöÑÁâàÊú¨Âè∑
         */
        extractVersionFromFileName(fileName) {
            return this.extractVersionFromUrl(fileName);
        },

        /**
         * ËßÑËåÉÂåñÁâàÊú¨Âè∑Ê†ºÂºè
         * @param {string} version - ÂéüÂßãÁâàÊú¨Âè∑
         * @returns {string} ËßÑËåÉÂåñÂêéÁöÑÁâàÊú¨Âè∑
         */
        normalizeVersion(version) {
            if (!version) return '';
            
            // ÁßªÈô§ÁâàÊú¨Âè∑‰∏≠ÁöÑ‰∏ãÂàíÁ∫øÔºåÊõøÊç¢‰∏∫ÁÇπÂè∑
            version = version.replace(/_/g, '.');
            
            // Á°Æ‰øùÊòØ x.y.z Ê†ºÂºè
            const parts = version.split('.');
            while (parts.length < 3) {
                parts.push('0');
            }
            
            return parts.slice(0, 3).join('.');
        },

        /**
         * ‰ªéËÑöÊú¨ÂÜÖÂÆπ‰∏≠ÊèêÂèñÁâàÊú¨Âè∑
         * @param {string} content - ËÑöÊú¨ÂÜÖÂÆπ
         * @returns {string} ÊèêÂèñÂà∞ÁöÑÁâàÊú¨Âè∑
         */
        extractVersionFromContent(content) {
            const versionMatch = content.match(/\/\/ @version\s+(\d+\.\d+\.\d+)/);
            return versionMatch ? versionMatch[1] : '';
        },

        /**
         * ‰ªéresourceÊàñrequireÊ†áÁ≠æ‰∏≠ÊèêÂèñÁâàÊú¨Âè∑
         * @param {string} tag - ÂÆåÊï¥ÁöÑresourceÊàñrequireÊ†áÁ≠æ
         * @returns {string} ÊèêÂèñÂà∞ÁöÑÁâàÊú¨Âè∑
         */
        extractVersionFromTag(tag) {
            // Â∞ùËØï‰ªéÊñá‰ª∂Ë∑ØÂæÑ‰∏≠ÊèêÂèñÁâàÊú¨Âè∑
            const filePathMatch = tag.match(/file:\/\/.*?([^\/]+\.user\.js)/i);
            if (filePathMatch) {
                return this.extractVersionFromFileName(filePathMatch[1]);
            }
            return '';
        },

        /**
         * Ëß£ÊûêÂ§ñÈÉ®ËÑöÊú¨‰ø°ÊÅØÔºàÂ¢ûÂº∫ÁâàÔºâ
         * @param {string} url - ËÑöÊú¨URL
         * @param {string} type - ËÑöÊú¨Á±ªÂûã
         * @param {boolean} forceRefresh - ÊòØÂê¶Âº∫Âà∂Âà∑Êñ∞
         */
        async parseExternalScript(url, type, forceRefresh = false) {
            Logger.debug(`ÂºÄÂßãËß£ÊûêÂ§ñÈÉ®ËÑöÊú¨: ${url}, Á±ªÂûã: ${type}, Âº∫Âà∂Âà∑Êñ∞: ${forceRefresh}`);

            try {
                const content = await this.tryReadScriptContent(url, forceRefresh);
                if (!content) {
                    Logger.debug('Êó†Ê≥ïËØªÂèñËÑöÊú¨ÂÜÖÂÆπ');
                    return {
                        name: this.guessScriptName(url),
                        version: this.extractVersionFromUrl(url),
                        description: this.guessDescription(url),
                        path: url,
                        type,
                        status: 'error',
                        statusText: 'Êó†Ê≥ïËØªÂèñÂÜÖÂÆπ'
                    };
                }

                const headerInfo = this.parseScriptHeader(content);
                const scriptInfo = {
                    name: headerInfo.name || this.guessScriptName(url),
                    version: headerInfo.version || this.extractVersionFromUrl(url),
                    description: headerInfo.description || this.guessDescription(url),
                    author: headerInfo.author,
                    path: url,
                    type,
                    status: 'loaded',
                    statusText: 'Â∑≤Âä†ËΩΩ',
                    requires: headerInfo.require || [],
                    grants: headerInfo.grant || [],
                    matches: headerInfo.match || []
                };

                Logger.debug('Ëß£ÊûêÂÆåÊàê:', scriptInfo);
                return scriptInfo;
                        } catch (error) {
                Logger.error('Ëß£ÊûêÂ§ñÈÉ®ËÑöÊú¨Êó∂ÂèëÁîüÈîôËØØ:', error);
                return {
                    name: this.guessScriptName(url),
                    version: this.extractVersionFromUrl(url),
                    description: this.guessDescription(url),
                    path: url,
                    type,
                    status: 'error',
                    statusText: 'Ëß£ÊûêÂ§±Ë¥•'
                };
            }
        },

        guessScriptName(url) {
            try {
                const fileName = url.split('/').pop() || '';
                return fileName
                    .replace(/\.user\.js$/, '')
                    .replace(/[-_]/g, ' ')
                    .replace(/([a-z])([A-Z])/g, '$1 $2')
                    .trim() || 'Êú™ÂëΩÂêçËÑöÊú¨';
            } catch (error) {
                return 'Êú™ÂëΩÂêçËÑöÊú¨';
            }
        },

        guessDescription(url) {
            try {
                const fileName = url.split('/').pop() || '';
                const baseName = fileName.replace(/\.user\.js$/, '');
                return `Â§ñÁΩÆËÑöÊú¨: ${baseName}`;
            } catch (error) {
                return 'Â§ñÁΩÆËÑöÊú¨';
            }
        },

        /**
         * Áº©Áü≠Ë∑ØÂæÑÊòæÁ§∫
         */
        shortenPath(path) {
            if (path.length > 40) {
                const parts = path.split(/[\/\\]/);
                if (parts.length > 2) {
                    return '...' + parts.slice(-2).join('\\');
                }
            }
            return path;
        },

        /**
         * Êõ¥Êñ∞Ê°ÜÊû∂ÁâàÊú¨Âè∑
         */
        updateFrameworkVersion() {
            const currentVersion = Framework.version;
            const parts = currentVersion.split('.');
            parts[2] = (parseInt(parts[2]) + 1).toString();
            const newVersion = parts.join('.');
            
            // Êõ¥Êñ∞ÂÜÖÂ≠ò‰∏≠ÁöÑÁâàÊú¨Âè∑
            Framework.version = newVersion;
            
            // Êõ¥Êñ∞ËÑöÊú¨Â§¥ÈÉ®ÁöÑÁâàÊú¨Âè∑
            if (typeof GM_info !== 'undefined') {
                const scriptContent = GM_info.scriptSource;
                const updatedContent = scriptContent.replace(
                    /(\/\/ @version\s+)(\d+\.\d+\.\d+)/,
                    `$1${newVersion}`
                );
                
                // ÈÄöÁü•Áî®Êà∑
                Notifier.info(`Ê°ÜÊû∂ÁâàÊú¨Â∑≤Êõ¥Êñ∞Âà∞ ${newVersion}`);
                Logger.info(`Ê°ÜÊû∂ÁâàÊú¨Â∑≤Êõ¥Êñ∞: ${currentVersion} -> ${newVersion}`);
                
                // ËøîÂõûÊñ∞ÁâàÊú¨Âè∑
                return newVersion;
            }
            return currentVersion;
        },

        /**
         * Âà∑Êñ∞ËÑöÊú¨‰ø°ÊÅØÔºàÂº∫Âà∂Âà∑Êñ∞Ôºâ
         */
        async refreshScriptInfo() {
            try {
                // Êõ¥Êñ∞Ê°ÜÊû∂ÁâàÊú¨Âè∑
                this.updateFrameworkVersion();
                
                // ÊòæÁ§∫Âä†ËΩΩÊèêÁ§∫
                Notifier.info('Ê≠£Âú®Âà∑Êñ∞ËÑöÊú¨‰ø°ÊÅØ...');
                
                // Âº∫Âà∂Âà∑Êñ∞Ëé∑ÂèñÊúÄÊñ∞Êï∞ÊçÆ
                const scriptsInfo = await this.getExternalScriptsInfo(true);
                
                // Êõ¥Êñ∞Èù¢ÊùøÊòæÁ§∫
                this.updateInfoPanel(scriptsInfo);
                
                // ÊòæÁ§∫ÊàêÂäüÊèêÁ§∫
                Notifier.success(`Âà∑Êñ∞ÊàêÂäüÔºåÂÖ±ÂèëÁé∞ ${scriptsInfo.length} ‰∏™ËÑöÊú¨`);
                
                Logger.info('Âº∫Âà∂Âà∑Êñ∞ÂÆåÊàêÔºåËÑöÊú¨Êï∞Èáè:', scriptsInfo.length);
                return true;
            } catch (error) {
                Logger.error('Âº∫Âà∂Âà∑Êñ∞Â§±Ë¥•:', error);
                Notifier.error('Âà∑Êñ∞Â§±Ë¥•ÔºåËØ∑Ê£ÄÊü•ËÑöÊú¨Êñá‰ª∂ÊòØÂê¶ÂèØËÆøÈóÆ');
                return false;
            }
        },

        contentCache: new Map(),
    };

    /**
     * ËÑöÊú¨‰ø°ÊÅØÊòæÁ§∫Âô®
     */
    const InfoDisplay = {
        getInfoStyles() {
            return `
                .script-framework-panel {
                    position: fixed;
                    right: 20px;
                    bottom: 70px;
                    width: 400px;
                    max-height: 600px;
                    background: #fff;
                    border-radius: 8px;
                    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
                    z-index: 9998;
                    overflow: hidden;
                    font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
                }

                .sf-info-content {
                    padding: 15px;
                    overflow-y: auto;
                    max-height: 550px;
                }

                .sf-header {
                    display: flex;
                    justify-content: space-between;
                    align-items: center;
                    padding: 10px 15px;
                    background: #f8f9fa;
                    border-bottom: 1px solid #eee;
                    cursor: move;
                }

                .sf-title {
                    font-size: 16px;
                    font-weight: 600;
                    color: #333;
                }

                .sf-close {
                    cursor: pointer;
                    font-size: 20px;
                    color: #666;
                    padding: 0 5px;
                }

                .sf-close:hover {
                    color: #333;
                }

                .sf-actions {
                    display: flex;
                    gap: 10px;
                    margin-bottom: 15px;
                    padding: 10px 0;
                    border-bottom: 1px solid #eee;
                }

                .sf-add-btn, .sf-refresh-button {
                    padding: 8px 12px;
                    border: none;
                    border-radius: 4px;
                    cursor: pointer;
                    font-size: 14px;
                    transition: all 0.2s ease;
                }

                .sf-add-btn {
                    background: #007bff;
                    color: white;
                }

                .sf-add-btn:hover {
                    background: #0056b3;
                }

                .sf-refresh-button {
                    background: #6c757d;
                    color: white;
                }

                .sf-refresh-button:hover {
                    background: #5a6268;
                }

                .sf-script-card {
                    background: #fff;
                    border: 1px solid #eee;
                    border-radius: 6px;
                    padding: 15px;
                    margin-bottom: 15px;
                    transition: all 0.2s ease;
                }

                .sf-script-card:hover {
                    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
                }

                .sf-script-header {
                    display: flex;
                    justify-content: space-between;
                    align-items: center;
                    margin-bottom: 10px;
                }

                .sf-script-name {
                    font-size: 15px;
                    font-weight: 600;
                    color: #333;
                }

                .sf-script-status {
                    font-size: 12px;
                    padding: 3px 8px;
                    border-radius: 12px;
                }

                .sf-status-success {
                    background: #d4edda;
                    color: #155724;
                }

                .sf-status-error {
                    background: #f8d7da;
                    color: #721c24;
                }

                .sf-script-description {
                    font-size: 13px;
                    color: #666;
                    margin-bottom: 10px;
                    line-height: 1.4;
                }

                .sf-script-meta {
                    display: flex;
                    gap: 15px;
                    margin-bottom: 10px;
                    font-size: 12px;
                    color: #666;
                }

                .sf-script-meta span {
                    display: inline-flex;
                    align-items: center;
                }

                .sf-script-details {
                    font-size: 12px;
                    color: #666;
                    margin: 10px 0;
                    padding: 10px;
                    background: #f8f9fa;
                    border-radius: 4px;
                }

                .sf-script-details > div {
                    margin-bottom: 5px;
                }

                .sf-script-details strong {
                    color: #495057;
                    margin-right: 5px;
                }

                .sf-script-path {
                    font-size: 12px;
                    color: #888;
                    margin-top: 10px;
                    word-break: break-all;
                }

                .sf-loading {
                    text-align: center;
                    padding: 20px;
                    color: #666;
                }

                .sf-no-scripts {
                    text-align: center;
                    padding: 20px;
                    color: #666;
                    font-style: italic;
                }

                .script-framework-toggle {
                    transition: transform 0.2s ease;
                }

                .script-framework-toggle:hover {
                    transform: scale(1.1);
                }
            `;
        },

        createInfoPanel() {
            // Á°Æ‰øùÊ†∑ÂºèË¢´Ê∑ªÂä†
            if (typeof GM_addStyle !== 'undefined') {
                GM_addStyle(this.getInfoStyles());
            }

            // Ê£ÄÊü•ÊòØÂê¶Â∑≤Â≠òÂú®Èù¢Êùø
            let panel = document.getElementById('script-framework-panel');
            if (panel) {
                Logger.debug('Èù¢ÊùøÂ∑≤Â≠òÂú®ÔºåÊòæÁ§∫Áé∞ÊúâÈù¢Êùø');
                panel.style.display = 'block';
                return panel;
            }

            // ÂàõÂª∫ÊÇ¨ÊµÆÂõæÊ†áÊåâÈíÆ
            const toggleButton = document.createElement('div');
            toggleButton.className = 'script-framework-toggle';
            toggleButton.textContent = 'üîß';
            toggleButton.style.cssText = `
                position: fixed;
                right: 20px;
                bottom: 20px;
                width: 40px;
                height: 40px;
                background: #fff;
                border: 2px solid #ddd;
                border-radius: 50%;
                display: flex;
                align-items: center;
                justify-content: center;
                cursor: pointer;
                z-index: 9999;
                box-shadow: 0 2px 5px rgba(0,0,0,0.2);
                transition: all 0.3s ease;
            `;
            document.body.appendChild(toggleButton);

            // ÂàõÂª∫Èù¢Êùø
            panel = document.createElement('div');
            panel.id = 'script-framework-panel';
            panel.className = 'script-framework-panel';
            panel.style.display = 'none'; // ÈªòËÆ§ÈöêËóè
            
            try {
                // ÂàùÂßãÂåñÈù¢ÊùøÂÜÖÂÆπ
                panel.innerHTML = this.generateInfoHTML();
                document.body.appendChild(panel);

                // Ê∑ªÂä†ÁÇπÂáª‰∫ã‰ª∂
                toggleButton.addEventListener('click', async () => {
                    try {
                        const panel = document.getElementById('script-framework-panel');
                        if (!panel) {
                            Logger.error('Êâæ‰∏çÂà∞Èù¢ÊùøÂÖÉÁ¥†');
                            return;
                        }

                        const isVisible = panel.style.display !== 'none';
                        panel.style.display = isVisible ? 'none' : 'block';
                        
                        // Â¶ÇÊûúÊòØÊòæÁ§∫Èù¢ÊùøÔºåÂàôÂà∑Êñ∞ÂÜÖÂÆπ
                        if (!isVisible) {
                            Logger.debug('ÊòæÁ§∫Èù¢ÊùøÂπ∂Âà∑Êñ∞ÂÜÖÂÆπ');
                            try {
                                await this.refreshScriptInfo(true); // Âº∫Âà∂Âà∑Êñ∞
                            } catch (error) {
                                Logger.error('Âà∑Êñ∞ËÑöÊú¨‰ø°ÊÅØÂ§±Ë¥•:', error);
                                panel.querySelector('#sf-scripts-container').innerHTML = 
                                    '<div class="sf-error">Âä†ËΩΩËÑöÊú¨‰ø°ÊÅØÂ§±Ë¥•ÔºåËØ∑ÈáçËØï</div>';
                            }
                        }
                    } catch (error) {
                        Logger.error('Â§ÑÁêÜÈù¢ÊùøÁÇπÂáª‰∫ã‰ª∂Êó∂ÂèëÁîüÈîôËØØ:', error);
                        Notifier.error('Êìç‰ΩúÂ§±Ë¥•ÔºåËØ∑Êü•ÁúãÊéßÂà∂Âè∞‰∫ÜËß£ËØ¶ÊÉÖ');
                    }
                });

                // Ê∑ªÂä†ÂÖ≥Èó≠ÊåâÈíÆ‰∫ã‰ª∂
                const closeButton = panel.querySelector('.sf-close');
                if (closeButton) {
                    closeButton.addEventListener('click', () => {
                        panel.style.display = 'none';
                    });
                }

                // Ê∑ªÂä†Âº∫Âà∂Âà∑Êñ∞ÊåâÈíÆ‰∫ã‰ª∂
                const refreshButton = panel.querySelector('.sf-refresh-button');
                if (refreshButton) {
                    refreshButton.addEventListener('click', async (e) => {
                        e.preventDefault();
                        try {
                            // Á¶ÅÁî®ÊåâÈíÆÔºåÊòæÁ§∫Âä†ËΩΩÁä∂ÊÄÅ
                            refreshButton.disabled = true;
                            refreshButton.textContent = 'üîÑ Âà∑Êñ∞‰∏≠...';
                            refreshButton.style.opacity = '0.7';
                            
                            // ÊâßË°åÂº∫Âà∂Âà∑Êñ∞
                            await this.refreshScriptInfo(true);
                            Notifier.success('Âà∑Êñ∞ÊàêÂäü');
                        } catch (error) {
                            Logger.error('Âº∫Âà∂Âà∑Êñ∞Â§±Ë¥•:', error);
                            panel.querySelector('#sf-scripts-container').innerHTML = 
                                '<div class="sf-error">Âà∑Êñ∞Â§±Ë¥•ÔºåËØ∑ÈáçËØï</div>';
                            Notifier.error('Âà∑Êñ∞Â§±Ë¥•ÔºåËØ∑ÈáçËØï');
                        } finally {
                            // ÊÅ¢Â§çÊåâÈíÆÁä∂ÊÄÅ
                            refreshButton.disabled = false;
                            refreshButton.textContent = 'üîÑ Âº∫Âà∂Âà∑Êñ∞';
                            refreshButton.style.opacity = '1';
                        }
                    });
                }

                Logger.info('Èù¢ÊùøÂàõÂª∫ÊàêÂäü');
            } catch (error) {
                Logger.error('ÂàõÂª∫Èù¢ÊùøÊó∂ÂèëÁîüÈîôËØØ:', error);
                Notifier.error('ÂàõÂª∫Èù¢ÊùøÂ§±Ë¥•ÔºåËØ∑Âà∑Êñ∞È°µÈù¢ÈáçËØï');
            }

            return panel;
        },

        generateInfoHTML() {
            const frameworkInfo = GM_info.script || {};
            return `
                <div class="sf-info-content">
                    <div class="sf-header">
                        <div class="sf-title">Â§ñÁΩÆËÑöÊú¨ÁÆ°ÁêÜ</div>
                        <div class="sf-close" title="ÂÖ≥Èó≠">√ó</div>
                    </div>
                    <div class="sf-framework-info">
                        <div class="sf-framework-name">${frameworkInfo.name || 'Ê®°ÂùóÂåñËÑöÊú¨ÂºÄÂèëÊ°ÜÊû∂'} v${frameworkInfo.version || '3.5'}</div>
                        <div class="sf-framework-description">${frameworkInfo.description || ''}</div>
                    </div>
                    <div class="sf-actions">
                        <button id="sf-add-script-btn" class="sf-add-btn">+ Ê∑ªÂä†Â§ñÁΩÆËÑöÊú¨</button>
                        <button class="sf-refresh-button" title="ÈáçÊñ∞Âä†ËΩΩÊâÄÊúâËÑöÊú¨‰ø°ÊÅØ">üîÑ Âº∫Âà∂Âà∑Êñ∞</button>
                    </div>
                    <div id="sf-scripts-container">
                        <div class="sf-loading">
                            <div class="sf-loading-spinner"></div>
                            <div style="margin: 10px 0;">Ê≠£Âú®Ëß£ÊûêËÑöÊú¨‰ø°ÊÅØ...</div>
                            <div style="font-size: 12px; color: #888;">È¶ñÊ¨°Âä†ËΩΩÂèØËÉΩÈúÄË¶ÅÂá†ÁßíÈíü</div>
                        </div>
                    </div>
                </div>
            `;
        },

        getInfoStyles() {
            return `
                ${this.getBaseStyles()}
                
                .sf-framework-info {
                    padding: 10px 15px;
                    background: #f8f9fa;
                    border-bottom: 1px solid #eee;
                    margin-bottom: 10px;
                }

                .sf-framework-name {
                    font-size: 14px;
                    font-weight: 600;
                    color: #333;
                    margin-bottom: 5px;
                }

                .sf-framework-description {
                    font-size: 12px;
                    color: #666;
                    line-height: 1.4;
                }

                .sf-loading {
                    text-align: center;
                    padding: 30px 20px;
                }

                .sf-loading-spinner {
                    display: inline-block;
                    width: 30px;
                    height: 30px;
                    border: 3px solid #f3f3f3;
                    border-top: 3px solid #3498db;
                    border-radius: 50%;
                    animation: spin 1s linear infinite;
                    margin-bottom: 10px;
                }

                @keyframes spin {
                    0% { transform: rotate(0deg); }
                    100% { transform: rotate(360deg); }
                }
            `;
        },

        /**
         * Êõ¥Êñ∞‰ø°ÊÅØÈù¢ÊùøÊòæÁ§∫
         */
        updateInfoPanel(externalScriptsInfo) {
            const container = document.getElementById('sf-scripts-container');
            if (!container) {
                Logger.error('Êâæ‰∏çÂà∞ËÑöÊú¨ÂÆπÂô®ÂÖÉÁ¥†');
                return;
            }

            if (!externalScriptsInfo || externalScriptsInfo.length === 0) {
                container.innerHTML = '<div class="sf-no-scripts">Êú™ÊâæÂà∞Â§ñÁΩÆËÑöÊú¨</div>';
                return;
            }

            let html = '';
            externalScriptsInfo.forEach(script => {
                const statusClass = script.status === 'loaded' ? 'sf-status-success' : 'sf-status-error';
                const statusText = script.status === 'loaded' ? 'Â∑≤Âä†ËΩΩ' : 'Âä†ËΩΩÂ§±Ë¥•';
                
                html += `
                    <div class="sf-script-card">
                        <div class="sf-script-header">
                            <div class="sf-script-name">${script.name || 'Êú™ÂëΩÂêçËÑöÊú¨'}</div>
                            <div class="sf-script-status ${statusClass}">${statusText}</div>
                        </div>
                        ${script.description ? `<div class="sf-script-description">${script.description}</div>` : ''}
                        <div class="sf-script-meta">
                            ${script.version ? `<span class="sf-version">v${script.version}</span>` : ''}
                            ${script.author ? `<span class="sf-author">‰ΩúËÄÖ: ${script.author}</span>` : ''}
                            ${script.type ? `<span class="sf-type">Á±ªÂûã: ${script.type}</span>` : ''}
                        </div>
                        <div class="sf-script-details">
                            ${script.requires && script.requires.length > 0 ? `
                                <div class="sf-requires">
                                    <strong>‰æùËµñ:</strong>
                                    <span>${script.requires.join(', ')}</span>
                                </div>
                            ` : ''}
                            ${script.grants && script.grants.length > 0 ? `
                                <div class="sf-grants">
                                    <strong>ÊùÉÈôê:</strong>
                                    <span>${script.grants.join(', ')}</span>
                                </div>
                            ` : ''}
                            ${script.matches && script.matches.length > 0 ? `
                                <div class="sf-matches">
                                    <strong>ÂåπÈÖç:</strong>
                                    <span>${script.matches.join(', ')}</span>
                                </div>
                            ` : ''}
                        </div>
                        <div class="sf-script-path" title="${script.path}">${this.shortenPath(script.path)}</div>
                    </div>
                `;
            });

            container.innerHTML = html;
            Logger.debug('Èù¢ÊùøÊõ¥Êñ∞ÂÆåÊàêÔºåÊòæÁ§∫ËÑöÊú¨Êï∞Èáè:', externalScriptsInfo.length);
        },

        /**
         * Ëé∑ÂèñÂ§ñÁΩÆËÑöÊú¨‰ø°ÊÅØ
         */
        async getExternalScriptsInfo(forceRefresh = false) {
            Logger.debug('ÂºÄÂßãËé∑ÂèñÂ§ñÁΩÆËÑöÊú¨‰ø°ÊÅØÔºåÂº∫Âà∂Âà∑Êñ∞:', forceRefresh);
            
            // Â¶ÇÊûú‰∏çÊòØÂº∫Âà∂Âà∑Êñ∞‰∏îÂ∑≤ÊúâÁºìÂ≠òÔºåÂàô‰ΩøÁî®ÁºìÂ≠òÊï∞ÊçÆ
            if (!forceRefresh && this.externalScriptCache.size > 0) {
                Logger.debug('‰ΩøÁî®ÁºìÂ≠òÁöÑËÑöÊú¨‰ø°ÊÅØ');
                return Array.from(this.externalScriptCache.values());
            }

            const scripts = [];
            
            try {
                // ‰ªéGM_infoËé∑ÂèñËµÑÊ∫êÂíårequire‰ø°ÊÅØ
                if (typeof GM_info !== 'undefined') {
                    const { script = {} } = GM_info;
                    const resources = script.resources || {};
                    const requires = script.require || [];
                    
                    Logger.debug('GM_info‰ø°ÊÅØ:', {
                        resources: Object.keys(resources),
                        requires: requires
                    });

                    // Â§ÑÁêÜ@resource
                    for (const [name, url] of Object.entries(resources)) {
                        Logger.debug(`Ëß£ÊûêresourceËÑöÊú¨: ${name} -> ${url}`);
                        try {
                            const scriptInfo = await this.parseExternalScript(url, 'resource', forceRefresh);
                            if (scriptInfo) {
                                scriptInfo.resourceName = name;
                                scripts.push(scriptInfo);
                                this.externalScriptCache.set(url, scriptInfo);
                                Logger.debug(`ÊàêÂäüËß£ÊûêresourceËÑöÊú¨: ${name}`);
                            }
                        } catch (error) {
                            Logger.error(`Ëß£ÊûêresourceËÑöÊú¨Â§±Ë¥• ${name}:`, error);
                        }
                    }
                    
                    // Â§ÑÁêÜ@require
                    for (const url of requires) {
                        Logger.debug(`Ëß£ÊûêrequireËÑöÊú¨: ${url}`);
                        try {
                                    const scriptInfo = await this.parseExternalScript(url, 'require', forceRefresh);
                                    if (scriptInfo) {
                                scripts.push(scriptInfo);
                                this.externalScriptCache.set(url, scriptInfo);
                                Logger.debug(`ÊàêÂäüËß£ÊûêrequireËÑöÊú¨: ${url}`);
                            }
                        } catch (error) {
                            Logger.error(`Ëß£ÊûêrequireËÑöÊú¨Â§±Ë¥• ${url}:`, error);
                        }
                    }

                    // Êõ¥Êñ∞Èù¢ÊùøÊòæÁ§∫
                    this.updateInfoPanel(scripts);
                } else {
                    Logger.error('GM_info‰∏çÂèØÁî®ÔºåËØ∑Ê£ÄÊü•@grantÊùÉÈôê');
                    Notifier.error('Êó†Ê≥ïËé∑ÂèñËÑöÊú¨‰ø°ÊÅØÔºåËØ∑Ê£ÄÊü•ÊùÉÈôêËÆæÁΩÆ');
                }
            } catch (error) {
                Logger.error('Ëé∑ÂèñËÑöÊú¨‰ø°ÊÅØÊó∂ÂèëÁîüÈîôËØØ:', error);
                Notifier.error('Ëé∑ÂèñËÑöÊú¨‰ø°ÊÅØÂ§±Ë¥•');
            }

            Logger.debug('ËÑöÊú¨‰ø°ÊÅØËé∑ÂèñÂÆåÊàêÔºåÊï∞Èáè:', scripts.length);
            return scripts;
        },

        /**
         * Â∞ùËØïËØªÂèñËÑöÊú¨ÂÜÖÂÆπ
         */
        async tryReadScriptContent(scriptUrl, forceRefresh = false) {
            Logger.debug(`Â∞ùËØïËØªÂèñËÑöÊú¨ÂÜÖÂÆπ: ${scriptUrl}, Âº∫Âà∂Âà∑Êñ∞: ${forceRefresh}`);

            try {
                // Ê£ÄÊü•ÁºìÂ≠ò
                if (!forceRefresh && this.contentCache.has(scriptUrl)) {
                    const cached = this.contentCache.get(scriptUrl);
                    if (Date.now() - cached.timestamp < 30000) { // 30ÁßíÁºìÂ≠ò
                        return cached.content;
                    }
                    this.contentCache.delete(scriptUrl);
                }

                // Â∞ùËØï‰ΩøÁî®GM_getResourceText
                if (typeof GM_getResourceText !== 'undefined' && typeof GM_info !== 'undefined') {
                    const resources = GM_info.script.resources || {};
                    const resourceName = Object.entries(resources).find(([_, url]) => url === scriptUrl)?.[0];
                    
                    if (resourceName) {
                        try {
                            const content = GM_getResourceText(resourceName);
                            if (content) {
                                this.contentCache.set(scriptUrl, {
                                    content,
                                    timestamp: Date.now()
                                });
                                return content;
                            }
                        } catch (error) {
                            Logger.debug(`GM_getResourceTextËØªÂèñÂ§±Ë¥•: ${error.message}`);
                        }
                    }
                }

                // Â∞ùËØï‰ΩøÁî®fetch
                const response = await fetch(scriptUrl, {
                    cache: forceRefresh ? 'reload' : 'default'
                });

                if (response.ok) {
                    const content = await response.text();
                    this.contentCache.set(scriptUrl, {
                        content,
                        timestamp: Date.now()
                    });
                    return content;
                }

                return null;
            } catch (error) {
                Logger.error(`ËØªÂèñËÑöÊú¨ÂÜÖÂÆπÂ§±Ë¥•: ${scriptUrl}`, error);
                return null;
            }
        },

        /**
         * Ëß£ÊûêËÑöÊú¨Â§¥ÈÉ®‰ø°ÊÅØ
         */
        parseScriptHeader(content) {
            if (!content) return null;

            const headerMatch = content.match(/\/\/ ==UserScript==([\s\S]*?)\/\/ ==\/UserScript==/);
            if (!headerMatch) return null;

            const headerContent = headerMatch[1];
            const info = {
                name: '',
                version: '',
                description: '',
                author: '',
                namespace: '',
                grant: [],
                require: [],
                resource: [],
                match: []
            };

            headerContent.split('\n').forEach(line => {
                const match = line.match(/\/\/\s*@(\w+)(?::(\w+(?:-\w+)?))?\s+(.+)/);
                if (match) {
                    const [, key, locale, value] = match;
                    const trimmedValue = value.trim();

                    // Â§ÑÁêÜÊú¨Âú∞Âåñ
                    if (locale) {
                        if (!info[`${key}_${locale}`]) {
                            info[`${key}_${locale}`] = trimmedValue;
                        }
                        return;
                    }

                    // Â§ÑÁêÜÊï∞ÁªÑÁ±ªÂûã
                    if (['grant', 'require', 'resource', 'match'].includes(key)) {
                        if (!info[key]) info[key] = [];
                        info[key].push(trimmedValue);
                    } else {
                        info[key] = trimmedValue;
                    }
                }
            });

            return info;
        },

        // ÁîüÊàêÂª∫ËÆÆÁöÑÊñá‰ª∂Ë∑ØÂæÑ
        generateSuggestedPath(fileName) {
            // Ëé∑ÂèñÁî®Êà∑ÂêçÔºàÂ∞ùËØïÂ§öÁßçÊñπÊ≥ïÔºâ
            const username = this.getCurrentUsername();

            // Â∏∏ËßÅÁöÑËÑöÊú¨Â≠òÊîæË∑ØÂæÑ
            const commonPaths = [
                `C:\\Users\\${username}\\Documents\\${fileName}`,
                `C:\\Users\\${username}\\Desktop\\${fileName}`,
                `C:\\Users\\${username}\\Downloads\\${fileName}`,
                `C:\\Users\\${username}\\.cursor\\ÊàëÁöÑËÑöÊú¨ÂºÄÂèë\\${fileName}`,
                `D:\\Scripts\\${fileName}`,
                `C:\\Scripts\\${fileName}`
            ];

            // ËøîÂõûÁ¨¨‰∏Ä‰∏™Âª∫ËÆÆË∑ØÂæÑÔºåÁî®Êà∑ÂèØ‰ª•‰øÆÊîπ
            return commonPaths[0];
        },

        // Ëé∑ÂèñÂΩìÂâçÁî®Êà∑Âêç
        getCurrentUsername() {
            try {
                // ÊñπÊ≥ï1: ‰ªéÂΩìÂâçËÑöÊú¨‰ø°ÊÅØ‰∏≠Ëé∑Âèñ
                if (GM_info && GM_info.script) {
                    // ‰ªéËÑöÊú¨Ë∑ØÂæÑ‰∏≠ÊèêÂèñ
                    if (GM_info.script.path) {
                        const pathMatch = GM_info.script.path.match(/Users[\/\\]([^\/\\]+)/i);
                        if (pathMatch && pathMatch[1]) {
                            return decodeURIComponent(pathMatch[1]);
                        }
                    }
                    
                    // ‰ªérequireË∑ØÂæÑ‰∏≠ÊèêÂèñ
                    const requires = GM_info.script.requires || [];
                    for (const req of requires) {
                        const reqMatch = req.match(/Users[\/\\]([^\/\\]+)/i);
                        if (reqMatch && reqMatch[1]) {
                            return decodeURIComponent(reqMatch[1]);
                        }
                    }
                    
                    // ‰ªéresourceË∑ØÂæÑ‰∏≠ÊèêÂèñ
                    const resources = GM_info.script.resources || {};
                    for (const key in resources) {
                        const resMatch = resources[key].match(/Users[\/\\]([^\/\\]+)/i);
                        if (resMatch && resMatch[1]) {
                            return decodeURIComponent(resMatch[1]);
                        }
                    }
                }

                // ÊñπÊ≥ï2: ‰ªéÂΩìÂâçURL‰∏≠Ëé∑ÂèñÔºàÂ¶ÇÊûúÊòØÊú¨Âú∞Êñá‰ª∂Ôºâ
                if (location.protocol === 'file:') {
                    const urlMatch = location.pathname.match(/Users[\/\\]([^\/\\]+)/i);
                    if (urlMatch && urlMatch[1]) {
                        return decodeURIComponent(urlMatch[1]);
                    }
                }

                // ÊñπÊ≥ï3: ‰ªélocalStorage‰∏≠Ëé∑ÂèñÁºìÂ≠òÁöÑÂÄº
                const cachedUsername = localStorage.getItem('scriptFramework_username');
                if (cachedUsername) {
                    return cachedUsername;
                }

                // ÊñπÊ≥ï4: ‰ªécookie‰∏≠Ëé∑ÂèñÔºàÂ¶ÇÊûú‰πãÂâç‰øùÂ≠òËøáÔºâ
                const cookies = document.cookie.split(';');
                for (const cookie of cookies) {
                    const [name, value] = cookie.trim().split('=');
                    if (name === 'scriptFramework_username') {
                        return decodeURIComponent(value);
                    }
                }

                // ÊñπÊ≥ï5: Â∞ùËØï‰ªéÂÖ∂‰ªñÂèØËÉΩÁöÑÊù•Ê∫êËé∑Âèñ
                const possibleSources = [
                    document.documentElement.innerHTML.match(/Users[\/\\]([^\/\\]+)[\/\\]Documents/i),
                    document.documentElement.innerHTML.match(/Áî®Êà∑[\/\\]([^\/\\]+)[\/\\]Documents/i),
                    document.documentElement.innerHTML.match(/C:[\/\\]Users[\/\\]([^\/\\]+)/i)
                ];

                for (const match of possibleSources) {
                    if (match && match[1]) {
                        const username = decodeURIComponent(match[1]);
                        // ÁºìÂ≠òÊâæÂà∞ÁöÑÁî®Êà∑Âêç
                        localStorage.setItem('scriptFramework_username', username);
                        return username;
                    }
                }

                // Â¶ÇÊûúÈÉΩÊ≤°ÊâæÂà∞ÔºåËøîÂõûÈªòËÆ§ÂÄº
                console.warn('[ScriptFramework] Êó†Ê≥ïËá™Âä®Ëé∑ÂèñÁî®Êà∑ÂêçÔºå‰ΩøÁî®ÈªòËÆ§ÂÄº');
                return 'Documents';
            } catch (error) {
                console.error('[ScriptFramework] Ëé∑ÂèñÁî®Êà∑ÂêçÊó∂Âá∫Èîô:', error);
                return 'Documents';
            }
        },

        // ÊòæÁ§∫Êñá‰ª∂ÈÄâÊã©ÊèêÁ§∫
        showFileSelectedHint(fileName) {
            const resultDiv = document.getElementById('sf-script-result');
            resultDiv.style.display = 'block';
            resultDiv.innerHTML = `
                <div style="color: #1967d2; font-weight: 500; margin-bottom: 8px;">
                    üìÅ Â∑≤ÈÄâÊã©Êñá‰ª∂: ${fileName}
                </div>
                <div class="sf-dialog-hint">
                    Áî±‰∫éÊµèËßàÂô®ÂÆâÂÖ®ÈôêÂà∂ÔºåÊó†Ê≥ïËé∑ÂèñÂÆåÊï¥Ë∑ØÂæÑ„ÄÇ<br/>
                    ËØ∑Ê£ÄÊü•Âπ∂‰øÆÊ≠£‰∏äÊñπÁöÑË∑ØÂæÑ‰ø°ÊÅØÔºåÁ°Æ‰øùÊåáÂêëÊ≠£Á°ÆÁöÑÊñá‰ª∂‰ΩçÁΩÆ„ÄÇ
                </div>
            `;

            // 3ÁßíÂêéËá™Âä®ÈöêËóèÊèêÁ§∫
            setTimeout(() => {
                if (resultDiv.innerHTML.includes('Â∑≤ÈÄâÊã©Êñá‰ª∂')) {
                    resultDiv.style.display = 'none';
                }
            }, 3000);
        },

        // Ëá™Âä®Ê∑ªÂä†@requireÂà∞ËÑöÊú¨
        handleAutoAddScript() {
            const input = document.getElementById('sf-script-path-input');
            const resultDiv = document.getElementById('sf-script-result');
            const path = input.value.trim();

            if (!path) {
                this.showDialogError('ËØ∑ËæìÂÖ•ËÑöÊú¨Êñá‰ª∂Ë∑ØÂæÑ');
                return;
            }

            if (!path.toLowerCase().endsWith('.js')) {
                this.showDialogError('ËØ∑ËæìÂÖ•ÊúâÊïàÁöÑJavaScriptÊñá‰ª∂Ë∑ØÂæÑÔºà.jsÁªìÂ∞æÔºâ');
                return;
            }

            // ËΩ¨Êç¢Ë∑ØÂæÑÊ†ºÂºè
            const formattedPath = this.formatScriptPath(path);

            // Ëá™Âä®‰ªéÊñá‰ª∂ÂêçÁîüÊàêresourceÂêçÁß∞
            const fileName = path.split(/[\\\/]/).pop();
            const resourceName = fileName.replace(/\.js$/i, '').replace(/[^a-zA-Z0-9_]/g, '_');

            if (!resourceName) {
                 this.showDialogError('Êó†Ê≥ï‰ªéÊñá‰ª∂ÂêçÁîüÊàêÊúâÊïàÁöÑResourceÂêçÁß∞„ÄÇ');
                 return;
            }

            const generatedLines = [
                `// @resource     ${resourceName} ${formattedPath}`,
                `// @require      ${formattedPath}`
            ];

            const linesToAdd = generatedLines.join('\n');
            if (!linesToAdd) return;


            // Ëé∑ÂèñÂΩìÂâçËÑöÊú¨‰ø°ÊÅØ
            const scriptInfo = this.getCurrentScriptInfo();

            // ÁîüÊàê‰øÆÊîπÂêéÁöÑËÑöÊú¨ÂÜÖÂÆπ
            const modifiedScript = this.addRequireToScript(scriptInfo.content, linesToAdd);

            // Â¶ÇÊûúÊ≤°ÊúâÂèëÁîüÂèòÂåñÔºåÂàô‰∏çÁªßÁª≠
            if (modifiedScript === scriptInfo.content) {
                return;
            }

            // ÊòæÁ§∫ÁªìÊûúÂíå‰∏ãËΩΩÈìæÊé•
            resultDiv.style.display = 'block';
            resultDiv.innerHTML = `
                <div style="color: #137333; font-weight: 500; margin-bottom: 8px;">
                    üöÄ ‰ª£Á†ÅÂ∑≤Ëá™Âä®Ê∑ªÂä†Âà∞ËÑöÊú¨ÔºÅ
                </div>
                <div class="sf-dialog-hint" style="margin-bottom: 12px;">
                    ËÑöÊú¨Â∑≤Ëá™Âä®Êõ¥Êñ∞ÔºåËØ∑‰∏ãËΩΩÂπ∂ÊõøÊç¢ÂéüËÑöÊú¨Êñá‰ª∂„ÄÇ<br/>
                    Êñ∞Â¢ûË°å: <code style="background: #f0f0f0; padding: 2px 4px; border-radius: 2px; white-space: pre;">${linesToAdd}</code>
                </div>
                <div style="display: flex; gap: 8px; flex-wrap: wrap;">
                    <button class="sf-dialog-btn sf-dialog-btn-primary" id="sf-download-btn">
                        üíæ ‰∏ãËΩΩ‰øÆÊîπÂêéÁöÑËÑöÊú¨
                    </button>
                    <button class="sf-dialog-btn sf-dialog-btn-secondary" id="sf-preview-btn">
                        üëÄ È¢ÑËßà‰øÆÊîπÂÜÖÂÆπ
                    </button>
                </div>
                <div id="sf-preview-content" style="display: none; margin-top: 12px;"></div>
            `;

            // ÁªëÂÆö‰∏ãËΩΩÊåâÈíÆ‰∫ã‰ª∂
            setTimeout(() => {
                const downloadBtn = document.getElementById('sf-download-btn');
                const previewBtn = document.getElementById('sf-preview-btn');

                if (downloadBtn) {
                    downloadBtn.addEventListener('click', () => {
                        this.downloadScript(modifiedScript, scriptInfo.filename);
                    });
                }

                if (previewBtn) {
                    previewBtn.addEventListener('click', () => {
                        this.showScriptPreview(modifiedScript);
                    });
                }
            }, 0);

            Logger.info(`Ëá™Âä®Ê∑ªÂä†‰ª£Á†Å: ${linesToAdd}`);
        },

        // Ëé∑ÂèñÂΩìÂâçËÑöÊú¨‰ø°ÊÅØ
        getCurrentScriptInfo() {
            const scriptName = GM_info.script.name || 'Ê®°ÂùóÂåñËÑöÊú¨ÂºÄÂèëÊ°ÜÊû∂';
            const version = GM_info.script.version || '3.4';

            // Ëé∑ÂèñËÑöÊú¨Ê∫êÁ†ÅÔºàÊ®°ÊãüÔºâ
            const scriptContent = this.getScriptTemplate();

            return {
                name: scriptName,
                version: version,
                filename: `${scriptName}-v${version}.user.js`,
                content: scriptContent
            };
        },

        // Ëé∑ÂèñËÑöÊú¨Ê®°ÊùøÔºàÂΩìÂâçËÑöÊú¨ÁöÑÂü∫Á°ÄÁªìÊûÑÔºâ
        getScriptTemplate() {
            // ÊèêÁ§∫Áî®Êà∑‰ΩøÁî®ÂÆûÈôÖÁöÑËÑöÊú¨Êñá‰ª∂
            return `// ==UserScript==
// @name         ${GM_info.script.name}
// @namespace    http://tampermonkey.net/
// @version      ${GM_info.script.version}
// @description  ${GM_info.script.description}
// @author       ${GM_info.script.author || 'ScriptDev Framework'}
// @match        *://*/*
// @require      file://C:/Users/„ÄêÁî®Êà∑Âêç„Äë/Documents/xxx.js
// @grant        GM_setValue
// @grant        GM_getValue
// @grant        GM_registerMenuCommand
// @grant        GM_notification
// @grant        GM_log
// @grant        GM_addStyle
// @grant        GM_info
// @grant        window.onurlchange
// ==/UserScript==

/*
 * „ÄêÈáçË¶ÅÊèêÁ§∫„Äë
 * ËøôÊòØËá™Âä®ÁîüÊàêÁöÑËÑöÊú¨Ê®°Êùø„ÄÇ
 * ËØ∑Â∞ÜÊÇ®ÂΩìÂâçÂÆåÊï¥ÁöÑËÑöÊú¨‰ª£Á†ÅÊõøÊç¢Ê≠§Ê≥®ÈáäÂêéÁöÑÂÜÖÂÆπ„ÄÇ
 *
 * Ê≠•È™§Ôºö
 * 1. Â§çÂà∂ÊÇ®ÂΩìÂâçÂÆåÊï¥ÁöÑËÑöÊú¨‰ª£Á†Å
 * 2. Âà†Èô§‰∏ãÈù¢ÁöÑÁ§∫‰æã‰ª£Á†Å
 * 3. Á≤òË¥¥ÊÇ®ÁöÑÂÆåÊï¥ËÑöÊú¨‰ª£Á†Å
 * 4. ‰øùÂ≠òÂπ∂Âú®Tampermonkey‰∏≠ÂØºÂÖ•
 */

(function() {
    'use strict';

    console.log('üöÄ ${GM_info.script.name} Â∑≤ÂêØÂä®ÔºÅ');
    console.log('üì¶ Êñ∞ÁöÑ@requireÂ∑≤Ê∑ªÂä†ÔºåËØ∑ÊõøÊç¢‰∏∫ÊÇ®ÁöÑÂÆåÊï¥ËÑöÊú¨‰ª£Á†Å');

    // ËØ∑Âú®ËøôÈáåÊ∑ªÂä†ÊÇ®ÁöÑÂÆåÊï¥ËÑöÊú¨‰ª£Á†Å
    // Âà†Èô§Ëøô‰∫õÁ§∫‰æã‰ª£Á†ÅÔºåÁ≤òË¥¥ÊÇ®ÁöÑÂÆûÈôÖËÑöÊú¨ÂÜÖÂÆπ

})();`;
        },

        // Âú®ËÑöÊú¨‰∏≠Ê∑ªÂä†@requireË°å
        addRequireToScript(scriptContent, requireLine) {
            const lines = scriptContent.split('\n');
            let insertIndex = -1;
            const isResource = requireLine.trim().startsWith('// @resource');

            // Êü•ÊâæÊèíÂÖ•‰ΩçÁΩÆ
            for (let i = 0; i < lines.length; i++) {
                const line = lines[i].trim();

                if (isResource) {
                    // Â¶ÇÊûúÊòØresource, Â∞ùËØïÊâæÂà∞ÊúÄÂêé‰∏Ä‰∏™@resourceÊàñ@require
                if (line.startsWith('// @resource') || line.startsWith('// @require')) {
                    insertIndex = i + 1;
                    }
                } else {
                    // Â¶ÇÊûúÊòØrequire, Â∞ùËØïÊâæÂà∞ÊúÄÂêé‰∏Ä‰∏™@require
                if (line.startsWith('// @require')) {
                    insertIndex = i + 1;
                    }
                }

                if (line.startsWith('// @grant') && insertIndex === -1) {
                    // Â¶ÇÊûúÊ≤°Êúâ@require/@resourceË°åÔºåÊèíÂÖ•Âà∞@grant‰πãÂâç
                    insertIndex = i;
                } else if (line.startsWith('// ==/UserScript==') && insertIndex === -1) {
                    // Â¶ÇÊûúÊ≤°Êúâ@grantË°åÔºåÊèíÂÖ•Âà∞userscriptÂ§¥ÈÉ®ÁªìÊùü‰πãÂâç
                    insertIndex = i;
                    break;
                }
            }

            // Ê£ÄÊü•ÊòØÂê¶Â∑≤ÁªèÂ≠òÂú®Áõ∏ÂêåÁöÑË°å
            const trimmedRequireLine = requireLine.trim();
            const existingLine = lines.find(line => line.trim() === trimmedRequireLine);

            if (existingLine) {
                // Â¶ÇÊûúÂ∑≤Â≠òÂú®ÔºåÁõ¥Êé•ËøîÂõûÔºå‰∏ç‰øÆÊîπ
                this.showDialogError('ËØ•Ë°åÂ∑≤Â≠òÂú®‰∫éËÑöÊú¨‰∏≠ÔºåÊó†ÈúÄÈáçÂ§çÊ∑ªÂä†„ÄÇ');
                 return scriptContent; // ËøîÂõûÂéüÂÜÖÂÆπ
            }

            // ÊèíÂÖ•Êñ∞ÁöÑË°å
            if (insertIndex !== -1) {
                lines.splice(insertIndex, 0, requireLine);
            } else {
                // Â¶ÇÊûúÊâæ‰∏çÂà∞ÂêàÈÄÇ‰ΩçÁΩÆÔºåÊ∑ªÂä†Âà∞Â§¥ÈÉ®ÊúÄÂêé
                const userScriptEndIndex = lines.findIndex(line => line.includes('==/UserScript=='));
                if (userScriptEndIndex !== -1) {
                    lines.splice(userScriptEndIndex, 0, requireLine);
                }
            }

            return lines.join('\n');
        },

        // ‰∏ãËΩΩËÑöÊú¨Êñá‰ª∂
        downloadScript(content, filename) {
            const blob = new Blob([content], { type: 'application/javascript' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = filename;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);

            // ÊòæÁ§∫ÊàêÂäüÊèêÁ§∫
            const resultDiv = document.getElementById('sf-script-result');
            const successMsg = document.createElement('div');
            successMsg.style.cssText = 'color: #137333; font-weight: 500; margin-top: 8px; padding: 8px; background: #e8f5e8; border-radius: 4px;';
            successMsg.textContent = '‚úÖ ËÑöÊú¨Êñá‰ª∂Â∑≤‰∏ãËΩΩÔºÅËØ∑ÊõøÊç¢ÂéüÊñá‰ª∂Âπ∂ÈáçÊñ∞Âä†ËΩΩ„ÄÇ';
            resultDiv.appendChild(successMsg);

            setTimeout(() => {
                successMsg.remove();
            }, 3000);
        },

        // ÊòæÁ§∫ËÑöÊú¨È¢ÑËßà
        showScriptPreview(content) {
            const previewDiv = document.getElementById('sf-preview-content');
            const lines = content.split('\n');
            const previewLines = lines.slice(0, 30); // Âè™ÊòæÁ§∫Ââç30Ë°å

            previewDiv.style.display = 'block';
            previewDiv.innerHTML = `
                <div style="background: #f8f9fa; border: 1px solid #e8eaed; border-radius: 4px; padding: 12px; margin-top: 8px;">
                    <div style="font-weight: 500; margin-bottom: 8px; color: #5f6368;">üìÑ ËÑöÊú¨È¢ÑËßàÔºàÂâç30Ë°åÔºâ:</div>
                    <pre style="background: #ffffff; padding: 8px; border-radius: 4px; font-size: 11px; line-height: 1.4; max-height: 200px; overflow-y: auto; margin: 0; font-family: 'Consolas', 'Monaco', monospace;">${previewLines.join('\n')}</pre>
                    ${lines.length > 30 ? `<div style="color: #5f6368; font-size: 12px; margin-top: 4px;">... ËøòÊúâ ${lines.length - 30} Ë°å</div>` : ''}
                </div>
            `;
        }
    };

    /**
     * ‰∫ã‰ª∂Â§ÑÁêÜÂô®
     */
    const EventHandler = {
        init() {
            // URLÂèòÂåñÁõëÂê¨
            if (typeof window.onurlchange !== 'undefined' && window.onurlchange === null) {
                window.addEventListener('urlchange', (info) => {
                    Logger.info('URLÂèòÂåñ:', info);
                    ModuleManager.triggerHook('urlChanged', info);
                });
            }

            // È°µÈù¢Âä†ËΩΩÂÆåÊàê
            if (document.readyState === 'loading') {
                document.addEventListener('DOMContentLoaded', () => {
                    ModuleManager.triggerHook('domReady');
                });
            } else {
                // DOMÂ∑≤ÁªèÂáÜÂ§áÂ•Ω
                setTimeout(() => ModuleManager.triggerHook('domReady'), 0);
            }

            // È°µÈù¢ÂÆåÂÖ®Âä†ËΩΩ
            if (document.readyState !== 'complete') {
                window.addEventListener('load', () => {
                    ModuleManager.triggerHook('pageLoaded');
                });
            } else {
                setTimeout(() => ModuleManager.triggerHook('pageLoaded'), 0);
            }
        }
    };

    /**
     * ËèúÂçïÁ≥ªÁªü
     */
    const MenuSystem = {
        init() {
            if (typeof GM_registerMenuCommand === 'undefined') {
                return;
            }

            // Ê≥®ÂÜåËèúÂçïÈ°π
            GM_registerMenuCommand('üìä ÊòæÁ§∫Ê°ÜÊû∂‰ø°ÊÅØ', () => {
                InfoDisplay.createInfoPanel();
            });

            GM_registerMenuCommand('üîç Ë∞ÉËØïÊ®°ÂºèÂàáÊç¢', () => {
                Framework.config.debugMode = !Framework.config.debugMode;
                Framework.config.logLevel = Framework.config.debugMode ? 'debug' : 'info';
                Notifier.info(`Ë∞ÉËØïÊ®°Âºè: ${Framework.config.debugMode ? 'ÂºÄÂêØ' : 'ÂÖ≥Èó≠'}`);
            });

            GM_registerMenuCommand('üìã Ê®°ÂùóÂàóË°®', () => {
                const modules = ModuleManager.list();
                const message = modules.length > 0 ?
                    `Â∑≤Ê≥®ÂÜåÊ®°Âùó:\n${modules.join('\n')}` :
                    'ÊöÇÊó†Ê≥®ÂÜåÊ®°Âùó';
                alert(message);
            });

            GM_registerMenuCommand('üìÅ Â§ñÁΩÆËÑöÊú¨‰ø°ÊÅØ', () => {
                const externalScripts = InfoDisplay.getExternalScriptsInfo();
                if (externalScripts.length > 0) {
                    const info = externalScripts.map(script =>
                        `${script.fileName} - ${script.statusText}`
                    ).join('\n');
                    alert(`Â§ñÁΩÆËÑöÊú¨‰ø°ÊÅØ:\n${info}`);
                } else {
                    alert('Êú™Ê£ÄÊµãÂà∞Â§ñÁΩÆËÑöÊú¨');
                }
            });

            GM_registerMenuCommand('üîÑ Âº∫Âà∂Âà∑Êñ∞Â§ñÁΩÆËÑöÊú¨', () => {
                Logger.info('ÈÄöËøáËèúÂçïÂº∫Âà∂Âà∑Êñ∞Â§ñÁΩÆËÑöÊú¨');

                // Ê∏ÖÁ©∫ÁºìÂ≠ò
                Framework.externalScriptCache.clear();

                // Â¶ÇÊûú‰ø°ÊÅØÈù¢ÊùøÂ≠òÂú®ÔºåÂàô‰ΩøÁî®Âà∑Êñ∞ÂäüËÉΩ
                const existingPanel = document.getElementById('script-framework-info');
                if (existingPanel) {
                    InfoDisplay.refreshScriptInfo();
                } else {
                    // ÈáçÊñ∞ÂàõÂª∫‰ø°ÊÅØÈù¢Êùø
                    InfoDisplay.createInfoPanel();
                }

                Notifier.success('Â∑≤Âº∫Âà∂Âà∑Êñ∞Â§ñÁΩÆËÑöÊú¨‰ø°ÊÅØ');
            });
        }
    };

    /**
     * Â≠òÂÇ®Á≥ªÁªü
     */
    const Storage = {
        get(key, defaultValue = null) {
            if (typeof GM_getValue !== 'undefined') {
                return GM_getValue(key, defaultValue);
            }

            try {
                const value = localStorage.getItem(`ScriptFramework_${key}`);
                return value ? JSON.parse(value) : defaultValue;
            } catch (error) {
                Logger.error('Â≠òÂÇ®ËØªÂèñÂ§±Ë¥•:', error);
                return defaultValue;
            }
        },

        set(key, value) {
            if (typeof GM_setValue !== 'undefined') {
                GM_setValue(key, value);
                return;
            }

            try {
                localStorage.setItem(`ScriptFramework_${key}`, JSON.stringify(value));
            } catch (error) {
                Logger.error('Â≠òÂÇ®ÂÜôÂÖ•Â§±Ë¥•:', error);
            }
        }
    };

    /**
     * Ê°ÜÊû∂‰∏ªË¶ÅAPI
     */
    return {
        // Ê†∏ÂøÉÊñπÊ≥ï
        init(scriptInfo) {
            if (Framework.isInitialized) {
                Logger.warn('Ê°ÜÊû∂Â∑≤ÂàùÂßãÂåñÔºåË∑≥ËøáÈáçÂ§çÂàùÂßãÂåñ');
        return;
    }

            Framework.scriptInfo = scriptInfo;
            Framework.isInitialized = true;

            Logger.info('ScriptFramework ÂàùÂßãÂåñÂºÄÂßã...');

            // ÂàùÂßãÂåñÂêÑ‰∏™Â≠êÁ≥ªÁªü
            EventHandler.init();
            MenuSystem.init();

            // ÂàõÂª∫ÊÇ¨ÊµÆÂõæÊ†á
            this.createToggleButton();

            // ÊòæÁ§∫Âä†ËΩΩ‰ø°ÊÅØ
            if (Framework.config.showLoadInfo) {
                // Âª∂ËøüÊòæÁ§∫ÔºåÁ°Æ‰øùDOMÂáÜÂ§áÂ∞±Áª™
                if (document.readyState === 'loading') {
                    document.addEventListener('DOMContentLoaded', () => {
                        setTimeout(() => this.createToggleButton(), 100);
                    });
                } else {
                    setTimeout(() => this.createToggleButton(), 100);
                }
            }

            // ÊòæÁ§∫ÂàùÂßãÂåñÂÆåÊàêÈÄöÁü•
            Notifier.success(`${scriptInfo.name} v${scriptInfo.version} Â∑≤ÂêØÂä®`);

            Logger.info('ScriptFramework ÂàùÂßãÂåñÂÆåÊàê');
        },

        createToggleButton() {
            // Ê£ÄÊü•ÊòØÂê¶Â∑≤Â≠òÂú®ÊåâÈíÆ
            let toggleButton = document.querySelector('.script-framework-toggle');
            if (toggleButton) {
                return;
            }

            // ÂàõÂª∫ÊÇ¨ÊµÆÂõæÊ†áÊåâÈíÆ
            toggleButton = document.createElement('div');
            toggleButton.className = 'script-framework-toggle';
            toggleButton.textContent = 'üîß';
            toggleButton.style.cssText = `
                position: fixed;
                right: 20px;
                bottom: 20px;
                width: 40px;
                height: 40px;
                background: #fff;
                border: 2px solid #ddd;
                border-radius: 50%;
                display: flex;
                align-items: center;
                justify-content: center;
                cursor: pointer;
                z-index: 9999;
                box-shadow: 0 2px 10px rgba(0,0,0,0.1);
                transition: all 0.3s ease;
                font-size: 20px;
                user-select: none;
            `;

            // Ê∑ªÂä†ÊÇ¨ÂÅúÊïàÊûú
            toggleButton.addEventListener('mouseenter', () => {
                toggleButton.style.transform = 'scale(1.1)';
                toggleButton.style.boxShadow = '0 4px 15px rgba(0,0,0,0.15)';
            });

            toggleButton.addEventListener('mouseleave', () => {
                toggleButton.style.transform = 'scale(1)';
                toggleButton.style.boxShadow = '0 2px 10px rgba(0,0,0,0.1)';
            });

            // Ê∑ªÂä†ÁÇπÂáª‰∫ã‰ª∂
            toggleButton.addEventListener('click', () => {
                const panel = document.getElementById('script-framework-info');
                if (panel) {
                    if (panel.style.display === 'none') {
                        panel.style.display = 'block';
                        toggleButton.style.transform = 'rotate(180deg)';
                    } else {
                        panel.style.display = 'none';
                        toggleButton.style.transform = 'rotate(0deg)';
                    }
                } else {
                    this.createInfoPanel();
                    toggleButton.style.transform = 'rotate(180deg)';
                }
            });

            // Ê∑ªÂä†Âà∞È°µÈù¢
            document.body.appendChild(toggleButton);
            Logger.debug('ÂàõÂª∫ÊÇ¨ÊµÆÂõæÊ†áÊåâÈíÆ');
        },

        // Ê®°ÂùóÁÆ°ÁêÜ
        registerModule: ModuleManager.register.bind(ModuleManager),
        getModule: ModuleManager.get.bind(ModuleManager),
        listModules: ModuleManager.list.bind(ModuleManager),
        removeModule: ModuleManager.remove.bind(ModuleManager),

        // Èí©Â≠êÁ≥ªÁªü
        addHook(name, callback) {
            if (!Framework.hooks.has(name)) {
                Framework.hooks.set(name, []);
            }
            Framework.hooks.get(name).push(callback);
            Logger.debug(`Èí©Â≠ê "${name}" Â∑≤Ê∑ªÂä†`);
        },

        removeHook(name, callback) {
            if (Framework.hooks.has(name)) {
                const hooks = Framework.hooks.get(name);
                const index = hooks.indexOf(callback);
                if (index > -1) {
                    hooks.splice(index, 1);
                    Logger.debug(`Èí©Â≠ê "${name}" Â∑≤ÁßªÈô§`);
                }
            }
        },

        triggerHook: ModuleManager.triggerHook.bind(ModuleManager),

        // Â∑•ÂÖ∑ÊñπÊ≥ï
        logger: Logger,
        notify: Notifier,
        storage: Storage,

        // ÈÖçÁΩÆ
        config: Framework.config,

        // ‰ø°ÊÅØ
        getInfo() {
            return {
                version: Framework.version,
                isInitialized: Framework.isInitialized,
                moduleCount: Framework.modules.size,
                startTime: Framework.startTime,
                uptime: Date.now() - Framework.startTime
            };
        },

        // ÊòæÁ§∫Ê∑ªÂä†ËÑöÊú¨ÂØπËØùÊ°Ü
        showAddScriptDialog() {
            const dialog = this.createAddScriptDialog();
            document.body.appendChild(dialog);
        },

        // ÂàõÂª∫Ê∑ªÂä†ËÑöÊú¨ÂØπËØùÊ°Ü
        createAddScriptDialog() {
            const dialog = document.createElement('div');
            dialog.id = 'sf-add-script-dialog';
            dialog.style.cssText = `
                position: fixed;
                top: 50%;
                left: 50%;
                transform: translate(-50%, -50%);
                background: white;
                padding: 20px;
                border-radius: 8px;
                box-shadow: 0 2px 10px rgba(0,0,0,0.1);
                z-index: 10000;
                min-width: 500px;
                max-width: 800px;
                width: 90%;
                font-family: Arial, sans-serif;
            `;

            dialog.innerHTML = `
                <div class="sf-dialog-content">
                    <div class="sf-dialog-title" style="font-size: 18px; margin-bottom: 15px; color: #333;">Ê∑ªÂä†Â§ñÁΩÆËÑöÊú¨</div>
                    <div class="sf-dialog-form">
                        <label class="sf-dialog-label" style="display: block; margin-bottom: 5px; color: #666;">ËÑöÊú¨Êñá‰ª∂Ë∑ØÂæÑÔºö</label>
                            <input
                                type="text"
                                class="sf-dialog-input"
                                id="sf-script-path-input"
                            placeholder="ËØ∑ËæìÂÖ•ÊàñÁ≤òË¥¥ÂÆåÊï¥ÁöÑJavaScriptÊñá‰ª∂Ë∑ØÂæÑ"
                            style="
                                width: 100%;
                                padding: 8px;
                                border: 1px solid #ddd;
                                border-radius: 4px;
                                margin-bottom: 10px;
                                box-sizing: border-box;
                                word-break: break-all;
                            "
                        />
                        <div class="sf-dialog-hint" style="color: #666; font-size: 12px; margin-bottom: 15px;">
                            ÊîØÊåÅÊ†ºÂºèÔºö.js Êñá‰ª∂<br/>
                            Á§∫‰æãÔºöC:\\Users\\Âº†‰∏â\\Desktop\\my-module.js
                        </div>
                    </div>
                    <div id="sf-script-result" style="
                        display: none;
                        background: #f5f5f5;
                        padding: 10px;
                        border-radius: 4px;
                        margin: 10px 0;
                        white-space: pre-wrap;
                        word-break: break-all;
                        font-family: monospace;
                        max-height: 200px;
                        overflow-y: auto;
                    "></div>
                    <div class="sf-dialog-actions" style="display: flex; justify-content: flex-end; gap: 10px;">
                        <button class="sf-dialog-btn sf-dialog-btn-secondary" id="sf-dialog-cancel-btn" style="
                            padding: 8px 15px;
                            border: none;
                            border-radius: 4px;
                            background: #f5f5f5;
                            cursor: pointer;
                        ">ÂèñÊ∂à</button>
                        <button class="sf-dialog-btn sf-dialog-btn-primary" id="sf-dialog-generate-btn" style="
                            padding: 8px 15px;
                            border: none;
                            border-radius: 4px;
                            background: #1a73e8;
                            color: white;
                            cursor: pointer;
                        ">ÁîüÊàê‰ª£Á†Å</button>
                        <button class="sf-dialog-btn sf-dialog-btn-copy" id="sf-copy-btn" style="
                            padding: 8px 15px;
                            border: none;
                            border-radius: 4px;
                            background: #28a745;
                            color: white;
                            cursor: pointer;
                            display: none;
                        ">Â§çÂà∂‰ª£Á†Å</button>
                    </div>
                    <div id="sf-error-msg" style="
                        color: #dc3545;
                        margin-top: 10px;
                        font-size: 14px;
                        display: none;
                    "></div>
                </div>
            `;

            // Ëé∑ÂèñÂÖÉÁ¥†ÂºïÁî®
            const pathInput = dialog.querySelector('#sf-script-path-input');
            const generateBtn = dialog.querySelector('#sf-dialog-generate-btn');
            const copyBtn = dialog.querySelector('#sf-copy-btn');
            const cancelBtn = dialog.querySelector('#sf-dialog-cancel-btn');
            const resultDiv = dialog.querySelector('#sf-script-result');
            const errorMsg = dialog.querySelector('#sf-error-msg');

            // Ê∑ªÂä†Á≤òË¥¥‰∫ã‰ª∂Â§ÑÁêÜ
            pathInput.addEventListener('paste', (e) => {
                // ÈòªÊ≠¢ÈªòËÆ§Á≤òË¥¥Ë°å‰∏∫
                e.preventDefault();
                // Ëé∑ÂèñÁ≤òË¥¥ÁöÑÊñáÊú¨
                const pastedText = (e.clipboardData || window.clipboardData).getData('text');
                // ÂéªÈô§ÂâçÂêéÁöÑÂºïÂè∑ÂíåÁ©∫Ê†º
                const cleanedText = pastedText.trim().replace(/^["']|["']$/g, '');
                // ËÆæÁΩÆÂ§ÑÁêÜÂêéÁöÑÊñáÊú¨
                pathInput.value = cleanedText;
            });

            // ÁîüÊàê‰ª£Á†ÅÊåâÈíÆÁÇπÂáª‰∫ã‰ª∂
                generateBtn.addEventListener('click', () => {
                const path = pathInput.value.trim().replace(/^["']|["']$/g, ''); // ÂéªÈô§ÂèØËÉΩÂ≠òÂú®ÁöÑÂºïÂè∑
                if (!path) {
                    showError('ËØ∑ËæìÂÖ•Êñá‰ª∂Ë∑ØÂæÑ');
                    return;
                }
                if (!path.toLowerCase().endsWith('.js')) {
                    showError('ËØ∑ËæìÂÖ•ÊúâÊïàÁöÑJavaScriptÊñá‰ª∂Ë∑ØÂæÑÔºà.jsÁªìÂ∞æÔºâ');
                    return;
            }

                try {
                    const formattedPath = formatFilePath(path);
                    const resourceName = path.split('\\').pop().replace(/[^a-zA-Z0-9]/g, '_');
                    const code = `// @resource     ${resourceName} ${formattedPath}\n// @require      ${formattedPath}`;
                    
                    resultDiv.textContent = code;
                    resultDiv.style.display = 'block';
                    copyBtn.style.display = 'inline-block';
                    errorMsg.style.display = 'none';
                    } catch (error) {
                    showError('Ë∑ØÂæÑÊ†ºÂºèÂåñÂ§±Ë¥•Ôºö' + error.message);
                    }
                });

            // Â§çÂà∂ÊåâÈíÆÁÇπÂáª‰∫ã‰ª∂
            copyBtn.addEventListener('click', () => {
                const code = resultDiv.textContent;
                navigator.clipboard.writeText(code).then(() => {
                    const originalText = copyBtn.textContent;
                    copyBtn.textContent = 'Â∑≤Â§çÂà∂ÔºÅ';
                    copyBtn.style.background = '#218838';
                    setTimeout(() => {
                        copyBtn.textContent = 'Â§çÂà∂‰ª£Á†Å';
                        copyBtn.style.background = '#28a745';
                    }, 2000);
                }).catch(err => {
                    showError('Â§çÂà∂Â§±Ë¥•Ôºö' + err.message);
                });
            });

            // ÂèñÊ∂àÊåâÈíÆÁÇπÂáª‰∫ã‰ª∂
            cancelBtn.addEventListener('click', () => {
                dialog.remove();
            });

            // ÊòæÁ§∫ÈîôËØØ‰ø°ÊÅØ
            function showError(message) {
                errorMsg.textContent = message;
                errorMsg.style.display = 'block';
                resultDiv.style.display = 'none';
                copyBtn.style.display = 'none';
            }

            // ÁÇπÂáªÂ§ñÈÉ®ÂÖ≥Èó≠ÂØπËØùÊ°Ü
            dialog.addEventListener('click', (e) => {
                if (e.target === dialog) {
                    dialog.remove();
                    }
                });

            // Ê∑ªÂä†Âà∞È°µÈù¢Âπ∂ËÅöÁÑ¶ËæìÂÖ•Ê°Ü
            document.body.appendChild(dialog);
            pathInput.focus();

            return dialog;
        },

        // Â§ÑÁêÜÊ∑ªÂä†ËÑöÊú¨
        handleAddScript() {
            const input = document.getElementById('sf-script-path-input');
            const resultDiv = document.getElementById('sf-script-result');
            const path = input.value.trim();

            if (!path) {
                this.showDialogError('ËØ∑ËæìÂÖ•ËÑöÊú¨Êñá‰ª∂Ë∑ØÂæÑ');
                return;
            }

            if (!path.toLowerCase().endsWith('.js')) {
                this.showDialogError('ËØ∑ËæìÂÖ•ÊúâÊïàÁöÑJavaScriptÊñá‰ª∂Ë∑ØÂæÑÔºà.jsÁªìÂ∞æÔºâ');
                return;
            }

            // ËΩ¨Êç¢Ë∑ØÂæÑÊ†ºÂºè
            const formattedPath = this.formatScriptPath(path);

            // Ëá™Âä®‰ªéÊñá‰ª∂ÂêçÁîüÊàêresourceÂêçÁß∞
            const fileName = path.split(/[\\\/]/).pop();
            const resourceName = fileName.replace(/\.js$/i, '').replace(/[^a-zA-Z0-9_]/g, '_');

            if (!resourceName) {
                 this.showDialogError('Êó†Ê≥ï‰ªéÊñá‰ª∂ÂêçÁîüÊàêÊúâÊïàÁöÑResourceÂêçÁß∞„ÄÇ');
                 return;
            }

            const generatedLines = [
                `// @resource     ${resourceName} ${formattedPath}`,
                `// @require      ${formattedPath}`
            ];

            const codeToInsert = generatedLines.join('\n');

            // ÊòæÁ§∫ÁªìÊûú
            resultDiv.style.display = 'block';
            resultDiv.innerHTML = `
                <div style="color: #137333; font-weight: 500; margin-bottom: 8px;">‚úÖ ‰ª£Á†ÅÁîüÊàêÊàêÂäü</div>
                <div class="sf-dialog-result" style="white-space: pre-wrap;">${codeToInsert}</div>
                <div class="sf-dialog-hint" style="margin-top: 8px;">
                    ËØ∑Â§çÂà∂‰∏äÈù¢ÁöÑ‰ª£Á†ÅÔºåÂπ∂ÊâãÂä®Ê∑ªÂä†Âà∞ËÑöÊú¨Â§¥ÈÉ®ÁöÑÂÖÉÊï∞ÊçÆÈÉ®ÂàÜ„ÄÇ<br/>
                    ÁÑ∂Âêé‰øùÂ≠òËÑöÊú¨Âπ∂Âà∑Êñ∞È°µÈù¢Âç≥ÂèØÁîüÊïà„ÄÇ
                </div>
                <div style="margin-top: 12px;">
                    <button class="sf-dialog-btn sf-dialog-btn-primary" id="sf-copy-btn" data-text="${codeToInsert.replace(/"/g, '&quot;').replace(/'/g, '&#39;')}">
                        üìã Â§çÂà∂Âà∞Ââ™Ë¥¥Êùø
                    </button>
                </div>
            `;

            // ‰∏∫Â§çÂà∂ÊåâÈíÆÁªëÂÆö‰∫ã‰ª∂
            setTimeout(() => {
                const copyBtn = document.getElementById('sf-copy-btn');
                if (copyBtn) {
                    copyBtn.addEventListener('click', () => {
                        const textToCopy = copyBtn.getAttribute('data-text').replace(/&#39;/g, "'").replace(/&quot;/g, '"');
                        navigator.clipboard.writeText(textToCopy).then(() => {
                            window.ScriptFramework.showCopySuccess();
                        }).catch((error) => {
                            console.error('Â§çÂà∂Â§±Ë¥•:', error);
                            // Â§áÁî®Â§çÂà∂ÊñπÊ≥ï
                            const textArea = document.createElement('textarea');
                            textArea.value = textToCopy;
                            document.body.appendChild(textArea);
                            textArea.select();
                            document.execCommand('copy');
                            document.body.removeChild(textArea);
                            window.ScriptFramework.showCopySuccess();
                        });
                    });
                }
            }, 0);

            Logger.info(`ÁîüÊàê‰ª£Á†Å: ${codeToInsert}`);
        },

        // Ê†ºÂºèÂåñËÑöÊú¨Ë∑ØÂæÑ
        formatScriptPath(path) {
            // Â∞ÜÂèçÊñúÊù†ËΩ¨Êç¢‰∏∫Ê≠£ÊñúÊù†
            let formattedPath = path.replace(/\\/g, '/');

            // Á°Æ‰øù‰ª•file:///ÂºÄÂ§¥
            if (!formattedPath.startsWith('file:///')) {
                // Â¶ÇÊûúÊòØÁªùÂØπË∑ØÂæÑÔºàÂ¶ÇC:/...Ôºâ
                if (/^[a-zA-Z]:/.test(formattedPath)) {
                    formattedPath = 'file:///' + formattedPath;
                }
                // Â¶ÇÊûú‰∏çÊòØÁªùÂØπË∑ØÂæÑÔºåÂÅáËÆæÊòØÁõ∏ÂØπË∑ØÂæÑ
                else if (!formattedPath.startsWith('/')) {
                    formattedPath = 'file:///' + formattedPath;
                } else {
                    formattedPath = 'file://' + formattedPath;
                }
            }

            return formattedPath;
        },

        // ÊòæÁ§∫ÂØπËØùÊ°ÜÈîôËØØ
        showDialogError(message) {
            const resultDiv = document.getElementById('sf-script-result');
            resultDiv.style.display = 'block';
            resultDiv.innerHTML = `
                <div style="color: #d93025; font-weight: 500;">‚ùå ${message}</div>
            `;
        },

        // ÊòæÁ§∫Â§çÂà∂ÊàêÂäüÊèêÁ§∫
        showCopySuccess() {
            const resultDiv = document.getElementById('sf-script-result');
            const existingContent = resultDiv.innerHTML;
            resultDiv.innerHTML = existingContent.replace('üìã Â§çÂà∂Âà∞Ââ™Ë¥¥Êùø', '‚úÖ Â∑≤Â§çÂà∂Âà∞Ââ™Ë¥¥Êùø');

            setTimeout(() => {
                resultDiv.innerHTML = existingContent;
            }, 2000);
        },

        // ÁîüÊàêÂª∫ËÆÆÁöÑÊñá‰ª∂Ë∑ØÂæÑ
        generateSuggestedPath(fileName) {
            // Ëé∑ÂèñÁî®Êà∑ÂêçÔºàÂ∞ùËØïÂ§öÁßçÊñπÊ≥ïÔºâ
            const username = this.getCurrentUsername();

            // Â∏∏ËßÅÁöÑËÑöÊú¨Â≠òÊîæË∑ØÂæÑ
            const commonPaths = [
                `C:\\Users\\${username}\\Documents\\${fileName}`,
                `C:\\Users\\${username}\\Desktop\\${fileName}`,
                `C:\\Users\\${username}\\Downloads\\${fileName}`,
                `C:\\Users\\${username}\\.cursor\\ÊàëÁöÑËÑöÊú¨ÂºÄÂèë\\${fileName}`,
                `D:\\Scripts\\${fileName}`,
                `C:\\Scripts\\${fileName}`
            ];

            // ËøîÂõûÁ¨¨‰∏Ä‰∏™Âª∫ËÆÆË∑ØÂæÑÔºåÁî®Êà∑ÂèØ‰ª•‰øÆÊîπ
            return commonPaths[0];
        },

        // Ëé∑ÂèñÂΩìÂâçÁî®Êà∑Âêç
        getCurrentUsername() {
            try {
                // ÊñπÊ≥ï1: ‰ªéÂΩìÂâçËÑöÊú¨‰ø°ÊÅØ‰∏≠Ëé∑Âèñ
                if (GM_info && GM_info.script) {
                    // ‰ªéËÑöÊú¨Ë∑ØÂæÑ‰∏≠ÊèêÂèñ
                    if (GM_info.script.path) {
                        const pathMatch = GM_info.script.path.match(/Users[\/\\]([^\/\\]+)/i);
                        if (pathMatch && pathMatch[1]) {
                            return decodeURIComponent(pathMatch[1]);
                        }
                    }
                    
                    // ‰ªérequireË∑ØÂæÑ‰∏≠ÊèêÂèñ
                    const requires = GM_info.script.requires || [];
                    for (const req of requires) {
                        const reqMatch = req.match(/Users[\/\\]([^\/\\]+)/i);
                        if (reqMatch && reqMatch[1]) {
                            return decodeURIComponent(reqMatch[1]);
                        }
                    }
                    
                    // ‰ªéresourceË∑ØÂæÑ‰∏≠ÊèêÂèñ
                    const resources = GM_info.script.resources || {};
                    for (const key in resources) {
                        const resMatch = resources[key].match(/Users[\/\\]([^\/\\]+)/i);
                        if (resMatch && resMatch[1]) {
                            return decodeURIComponent(resMatch[1]);
                        }
                    }
                }

                // ÊñπÊ≥ï2: ‰ªéÂΩìÂâçURL‰∏≠Ëé∑ÂèñÔºàÂ¶ÇÊûúÊòØÊú¨Âú∞Êñá‰ª∂Ôºâ
                if (location.protocol === 'file:') {
                    const urlMatch = location.pathname.match(/Users[\/\\]([^\/\\]+)/i);
                    if (urlMatch && urlMatch[1]) {
                        return decodeURIComponent(urlMatch[1]);
                    }
                }

                // ÊñπÊ≥ï3: ‰ªélocalStorage‰∏≠Ëé∑ÂèñÁºìÂ≠òÁöÑÂÄº
                const cachedUsername = localStorage.getItem('scriptFramework_username');
                if (cachedUsername) {
                    return cachedUsername;
                }

                // ÊñπÊ≥ï4: ‰ªécookie‰∏≠Ëé∑ÂèñÔºàÂ¶ÇÊûú‰πãÂâç‰øùÂ≠òËøáÔºâ
                const cookies = document.cookie.split(';');
                for (const cookie of cookies) {
                    const [name, value] = cookie.trim().split('=');
                    if (name === 'scriptFramework_username') {
                        return decodeURIComponent(value);
                    }
                }

                // ÊñπÊ≥ï5: Â∞ùËØï‰ªéÂÖ∂‰ªñÂèØËÉΩÁöÑÊù•Ê∫êËé∑Âèñ
                const possibleSources = [
                    document.documentElement.innerHTML.match(/Users[\/\\]([^\/\\]+)[\/\\]Documents/i),
                    document.documentElement.innerHTML.match(/Áî®Êà∑[\/\\]([^\/\\]+)[\/\\]Documents/i),
                    document.documentElement.innerHTML.match(/C:[\/\\]Users[\/\\]([^\/\\]+)/i)
                ];

                for (const match of possibleSources) {
                    if (match && match[1]) {
                        const username = decodeURIComponent(match[1]);
                        // ÁºìÂ≠òÊâæÂà∞ÁöÑÁî®Êà∑Âêç
                        localStorage.setItem('scriptFramework_username', username);
                        return username;
                    }
                }

                // Â¶ÇÊûúÈÉΩÊ≤°ÊâæÂà∞ÔºåËøîÂõûÈªòËÆ§ÂÄº
                console.warn('[ScriptFramework] Êó†Ê≥ïËá™Âä®Ëé∑ÂèñÁî®Êà∑ÂêçÔºå‰ΩøÁî®ÈªòËÆ§ÂÄº');
                return 'Documents';
            } catch (error) {
                console.error('[ScriptFramework] Ëé∑ÂèñÁî®Êà∑ÂêçÊó∂Âá∫Èîô:', error);
                return 'Documents';
            }
        },

        // ÊòæÁ§∫Êñá‰ª∂ÈÄâÊã©ÊèêÁ§∫
        showFileSelectedHint(fileName) {
            const resultDiv = document.getElementById('sf-script-result');
            resultDiv.style.display = 'block';
            resultDiv.innerHTML = `
                <div style="color: #1967d2; font-weight: 500; margin-bottom: 8px;">
                    üìÅ Â∑≤ÈÄâÊã©Êñá‰ª∂: ${fileName}
                </div>
                <div class="sf-dialog-hint">
                    Áî±‰∫éÊµèËßàÂô®ÂÆâÂÖ®ÈôêÂà∂ÔºåÊó†Ê≥ïËé∑ÂèñÂÆåÊï¥Ë∑ØÂæÑ„ÄÇ<br/>
                    ËØ∑Ê£ÄÊü•Âπ∂‰øÆÊ≠£‰∏äÊñπÁöÑË∑ØÂæÑ‰ø°ÊÅØÔºåÁ°Æ‰øùÊåáÂêëÊ≠£Á°ÆÁöÑÊñá‰ª∂‰ΩçÁΩÆ„ÄÇ
                </div>
            `;

            // 3ÁßíÂêéËá™Âä®ÈöêËóèÊèêÁ§∫
            setTimeout(() => {
                if (resultDiv.innerHTML.includes('Â∑≤ÈÄâÊã©Êñá‰ª∂')) {
                    resultDiv.style.display = 'none';
                }
            }, 3000);
        },

        // Ëá™Âä®Ê∑ªÂä†@requireÂà∞ËÑöÊú¨
        handleAutoAddScript() {
            const input = document.getElementById('sf-script-path-input');
            const resultDiv = document.getElementById('sf-script-result');
            const path = input.value.trim();

            if (!path) {
                this.showDialogError('ËØ∑ËæìÂÖ•ËÑöÊú¨Êñá‰ª∂Ë∑ØÂæÑ');
                return;
            }

            if (!path.toLowerCase().endsWith('.js')) {
                this.showDialogError('ËØ∑ËæìÂÖ•ÊúâÊïàÁöÑJavaScriptÊñá‰ª∂Ë∑ØÂæÑÔºà.jsÁªìÂ∞æÔºâ');
                return;
            }

            // ËΩ¨Êç¢Ë∑ØÂæÑÊ†ºÂºè
            const formattedPath = this.formatScriptPath(path);

            // Ëá™Âä®‰ªéÊñá‰ª∂ÂêçÁîüÊàêresourceÂêçÁß∞
            const fileName = path.split(/[\\\/]/).pop();
            const resourceName = fileName.replace(/\.js$/i, '').replace(/[^a-zA-Z0-9_]/g, '_');

            if (!resourceName) {
                 this.showDialogError('Êó†Ê≥ï‰ªéÊñá‰ª∂ÂêçÁîüÊàêÊúâÊïàÁöÑResourceÂêçÁß∞„ÄÇ');
                 return;
            }

            const generatedLines = [
                `// @resource     ${resourceName} ${formattedPath}`,
                `// @require      ${formattedPath}`
            ];

            const linesToAdd = generatedLines.join('\n');
            if (!linesToAdd) return;


            // Ëé∑ÂèñÂΩìÂâçËÑöÊú¨‰ø°ÊÅØ
            const scriptInfo = this.getCurrentScriptInfo();

            // ÁîüÊàê‰øÆÊîπÂêéÁöÑËÑöÊú¨ÂÜÖÂÆπ
            const modifiedScript = this.addRequireToScript(scriptInfo.content, linesToAdd);

            // Â¶ÇÊûúÊ≤°ÊúâÂèëÁîüÂèòÂåñÔºåÂàô‰∏çÁªßÁª≠
            if (modifiedScript === scriptInfo.content) {
                return;
            }

            // ÊòæÁ§∫ÁªìÊûúÂíå‰∏ãËΩΩÈìæÊé•
            resultDiv.style.display = 'block';
            resultDiv.innerHTML = `
                <div style="color: #137333; font-weight: 500; margin-bottom: 8px;">
                    üöÄ ‰ª£Á†ÅÂ∑≤Ëá™Âä®Ê∑ªÂä†Âà∞ËÑöÊú¨ÔºÅ
                </div>
                <div class="sf-dialog-hint" style="margin-bottom: 12px;">
                    ËÑöÊú¨Â∑≤Ëá™Âä®Êõ¥Êñ∞ÔºåËØ∑‰∏ãËΩΩÂπ∂ÊõøÊç¢ÂéüËÑöÊú¨Êñá‰ª∂„ÄÇ<br/>
                    Êñ∞Â¢ûË°å: <code style="background: #f0f0f0; padding: 2px 4px; border-radius: 2px; white-space: pre;">${linesToAdd}</code>
                </div>
                <div style="display: flex; gap: 8px; flex-wrap: wrap;">
                    <button class="sf-dialog-btn sf-dialog-btn-primary" id="sf-download-btn">
                        üíæ ‰∏ãËΩΩ‰øÆÊîπÂêéÁöÑËÑöÊú¨
                    </button>
                    <button class="sf-dialog-btn sf-dialog-btn-secondary" id="sf-preview-btn">
                        üëÄ È¢ÑËßà‰øÆÊîπÂÜÖÂÆπ
                    </button>
                </div>
                <div id="sf-preview-content" style="display: none; margin-top: 12px;"></div>
            `;

            // ÁªëÂÆö‰∏ãËΩΩÊåâÈíÆ‰∫ã‰ª∂
            setTimeout(() => {
                const downloadBtn = document.getElementById('sf-download-btn');
                const previewBtn = document.getElementById('sf-preview-btn');

                if (downloadBtn) {
                    downloadBtn.addEventListener('click', () => {
                        this.downloadScript(modifiedScript, scriptInfo.filename);
                    });
                }

                if (previewBtn) {
                    previewBtn.addEventListener('click', () => {
                        this.showScriptPreview(modifiedScript);
                    });
                }
            }, 0);

            Logger.info(`Ëá™Âä®Ê∑ªÂä†‰ª£Á†Å: ${linesToAdd}`);
        },

        // Ëé∑ÂèñÂΩìÂâçËÑöÊú¨‰ø°ÊÅØ
        getCurrentScriptInfo() {
            const scriptName = GM_info.script.name || 'Ê®°ÂùóÂåñËÑöÊú¨ÂºÄÂèëÊ°ÜÊû∂';
            const version = GM_info.script.version || '3.4';

            // Ëé∑ÂèñËÑöÊú¨Ê∫êÁ†ÅÔºàÊ®°ÊãüÔºâ
            const scriptContent = this.getScriptTemplate();

            return {
                name: scriptName,
                version: version,
                filename: `${scriptName}-v${version}.user.js`,
                content: scriptContent
            };
        },

        // Ëé∑ÂèñËÑöÊú¨Ê®°ÊùøÔºàÂΩìÂâçËÑöÊú¨ÁöÑÂü∫Á°ÄÁªìÊûÑÔºâ
        getScriptTemplate() {
            // ÊèêÁ§∫Áî®Êà∑‰ΩøÁî®ÂÆûÈôÖÁöÑËÑöÊú¨Êñá‰ª∂
            return `// ==UserScript==
// @name         ${GM_info.script.name}
// @namespace    http://tampermonkey.net/
// @version      ${GM_info.script.version}
// @description  ${GM_info.script.description}
// @author       ${GM_info.script.author || 'ScriptDev Framework'}
// @match        *://*/*
// @require      file://C:/Users/„ÄêÁî®Êà∑Âêç„Äë/Documents/xxx.js
// @grant        GM_setValue
// @grant        GM_getValue
// @grant        GM_registerMenuCommand
// @grant        GM_notification
// @grant        GM_log
// @grant        GM_addStyle
// @grant        GM_info
// @grant        window.onurlchange
// ==/UserScript==

/*
 * „ÄêÈáçË¶ÅÊèêÁ§∫„Äë
 * ËøôÊòØËá™Âä®ÁîüÊàêÁöÑËÑöÊú¨Ê®°Êùø„ÄÇ
 * ËØ∑Â∞ÜÊÇ®ÂΩìÂâçÂÆåÊï¥ÁöÑËÑöÊú¨‰ª£Á†ÅÊõøÊç¢Ê≠§Ê≥®ÈáäÂêéÁöÑÂÜÖÂÆπ„ÄÇ
 *
 * Ê≠•È™§Ôºö
 * 1. Â§çÂà∂ÊÇ®ÂΩìÂâçÂÆåÊï¥ÁöÑËÑöÊú¨‰ª£Á†Å
 * 2. Âà†Èô§‰∏ãÈù¢ÁöÑÁ§∫‰æã‰ª£Á†Å
 * 3. Á≤òË¥¥ÊÇ®ÁöÑÂÆåÊï¥ËÑöÊú¨‰ª£Á†Å
 * 4. ‰øùÂ≠òÂπ∂Âú®Tampermonkey‰∏≠ÂØºÂÖ•
 */

(function() {
    'use strict';

    console.log('üöÄ ${GM_info.script.name} Â∑≤ÂêØÂä®ÔºÅ');
    console.log('üì¶ Êñ∞ÁöÑ@requireÂ∑≤Ê∑ªÂä†ÔºåËØ∑ÊõøÊç¢‰∏∫ÊÇ®ÁöÑÂÆåÊï¥ËÑöÊú¨‰ª£Á†Å');

    // ËØ∑Âú®ËøôÈáåÊ∑ªÂä†ÊÇ®ÁöÑÂÆåÊï¥ËÑöÊú¨‰ª£Á†Å
    // Âà†Èô§Ëøô‰∫õÁ§∫‰æã‰ª£Á†ÅÔºåÁ≤òË¥¥ÊÇ®ÁöÑÂÆûÈôÖËÑöÊú¨ÂÜÖÂÆπ

})();`;
        },

        // Âú®ËÑöÊú¨‰∏≠Ê∑ªÂä†@requireË°å
        addRequireToScript(scriptContent, requireLine) {
            const lines = scriptContent.split('\n');
            let insertIndex = -1;
            const isResource = requireLine.trim().startsWith('// @resource');

            // Êü•ÊâæÊèíÂÖ•‰ΩçÁΩÆ
            for (let i = 0; i < lines.length; i++) {
                const line = lines[i].trim();

                if (isResource) {
                    // Â¶ÇÊûúÊòØresource, Â∞ùËØïÊâæÂà∞ÊúÄÂêé‰∏Ä‰∏™@resourceÊàñ@require
                if (line.startsWith('// @resource') || line.startsWith('// @require')) {
                    insertIndex = i + 1;
                    }
                } else {
                    // Â¶ÇÊûúÊòØrequire, Â∞ùËØïÊâæÂà∞ÊúÄÂêé‰∏Ä‰∏™@require
                if (line.startsWith('// @require')) {
                    insertIndex = i + 1;
                    }
                }

                if (line.startsWith('// @grant') && insertIndex === -1) {
                    // Â¶ÇÊûúÊ≤°Êúâ@require/@resourceË°åÔºåÊèíÂÖ•Âà∞@grant‰πãÂâç
                    insertIndex = i;
                } else if (line.startsWith('// ==/UserScript==') && insertIndex === -1) {
                    // Â¶ÇÊûúÊ≤°Êúâ@grantË°åÔºåÊèíÂÖ•Âà∞userscriptÂ§¥ÈÉ®ÁªìÊùü‰πãÂâç
                    insertIndex = i;
                    break;
                }
            }

            // Ê£ÄÊü•ÊòØÂê¶Â∑≤ÁªèÂ≠òÂú®Áõ∏ÂêåÁöÑË°å
            const trimmedRequireLine = requireLine.trim();
            const existingLine = lines.find(line => line.trim() === trimmedRequireLine);

            if (existingLine) {
                // Â¶ÇÊûúÂ∑≤Â≠òÂú®ÔºåÁõ¥Êé•ËøîÂõûÔºå‰∏ç‰øÆÊîπ
                this.showDialogError('ËØ•Ë°åÂ∑≤Â≠òÂú®‰∫éËÑöÊú¨‰∏≠ÔºåÊó†ÈúÄÈáçÂ§çÊ∑ªÂä†„ÄÇ');
                 return scriptContent; // ËøîÂõûÂéüÂÜÖÂÆπ
            }

            // ÊèíÂÖ•Êñ∞ÁöÑË°å
            if (insertIndex !== -1) {
                lines.splice(insertIndex, 0, requireLine);
            } else {
                // Â¶ÇÊûúÊâæ‰∏çÂà∞ÂêàÈÄÇ‰ΩçÁΩÆÔºåÊ∑ªÂä†Âà∞Â§¥ÈÉ®ÊúÄÂêé
                const userScriptEndIndex = lines.findIndex(line => line.includes('==/UserScript=='));
                if (userScriptEndIndex !== -1) {
                    lines.splice(userScriptEndIndex, 0, requireLine);
                }
            }

            return lines.join('\n');
        },

        // ‰∏ãËΩΩËÑöÊú¨Êñá‰ª∂
        downloadScript(content, filename) {
            const blob = new Blob([content], { type: 'application/javascript' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = filename;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);

            // ÊòæÁ§∫ÊàêÂäüÊèêÁ§∫
            const resultDiv = document.getElementById('sf-script-result');
            const successMsg = document.createElement('div');
            successMsg.style.cssText = 'color: #137333; font-weight: 500; margin-top: 8px; padding: 8px; background: #e8f5e8; border-radius: 4px;';
            successMsg.textContent = '‚úÖ ËÑöÊú¨Êñá‰ª∂Â∑≤‰∏ãËΩΩÔºÅËØ∑ÊõøÊç¢ÂéüÊñá‰ª∂Âπ∂ÈáçÊñ∞Âä†ËΩΩ„ÄÇ';
            resultDiv.appendChild(successMsg);

            setTimeout(() => {
                successMsg.remove();
            }, 3000);
        },

        // ÊòæÁ§∫ËÑöÊú¨È¢ÑËßà
        showScriptPreview(content) {
            const previewDiv = document.getElementById('sf-preview-content');
            const lines = content.split('\n');
            const previewLines = lines.slice(0, 30); // Âè™ÊòæÁ§∫Ââç30Ë°å

            previewDiv.style.display = 'block';
            previewDiv.innerHTML = `
                <div style="background: #f8f9fa; border: 1px solid #e8eaed; border-radius: 4px; padding: 12px; margin-top: 8px;">
                    <div style="font-weight: 500; margin-bottom: 8px; color: #5f6368;">üìÑ ËÑöÊú¨È¢ÑËßàÔºàÂâç30Ë°åÔºâ:</div>
                    <pre style="background: #ffffff; padding: 8px; border-radius: 4px; font-size: 11px; line-height: 1.4; max-height: 200px; overflow-y: auto; margin: 0; font-family: 'Consolas', 'Monaco', monospace;">${previewLines.join('\n')}</pre>
                    ${lines.length > 30 ? `<div style="color: #5f6368; font-size: 12px; margin-top: 4px;">... ËøòÊúâ ${lines.length - 30} Ë°å</div>` : ''}
                </div>
            `;
        }
    };
})();

// ÂÖ®Â±ÄÂø´Êç∑ÊñπÂºè
window.SF = window.ScriptFramework;

// Á°Æ‰øùScriptFrameworkÂú®ÂÖ®Â±Ä‰ΩúÁî®Âüü‰∏≠ÂèØÁî®
if (typeof window.ScriptFramework === 'undefined') {
    console.error('ScriptFramework Êú™Ê≠£Á°ÆÂàùÂßãÂåñ');
} else {
    console.log('‚úÖ ScriptFramework Â∑≤Ê≠£Á°ÆÊö¥Èú≤Âà∞ÂÖ®Â±Ä‰ΩúÁî®Âüü');
    console.log('üîß ÂèØÁî®ÊñπÊ≥ï:', Object.keys(window.ScriptFramework));
    }

    // ÂêØÂä®Ê°ÜÊû∂
    ScriptFramework.init({
        name: GM_info.script.name,
        version: GM_info.script.version,
        author: GM_info.script.author || 'Êú™Áü•‰ΩúËÄÖ',
        description: GM_info.script.description,
        matches: GM_info.script.matches,
        requires: GM_info.script.resources?.map(r => r.name) || []
    });

    GM_log('üöÄ Ê®°ÂùóÂåñËÑöÊú¨ÂºÄÂèëÊ°ÜÊû∂Â∑≤ÂêØÂä® - ‰øÆÂ§çÊåâÈíÆÁÇπÂáª‰∫ã‰ª∂');

    console.log('‰∏ªËÑöÊú¨Â∑≤Âä†ËΩΩ');

    console.log('Â§ñÁΩÆËÑöÊú¨Âä†ËΩΩË∑ØÂæÑ:', GM_info.script.resources);  // Êü•ÁúãÂÆûÈôÖÂä†ËΩΩË∑ØÂæÑ
    console.log('Â§ñÁΩÆËÑöÊú¨ÂºÄÂßãÊâßË°å');

    /**
     * ÊµãËØïË∑ØÂæÑÊ†ºÂºèÂåñÂäüËÉΩ
     */
    function testFormatFilePath() {
        const testPath = "C:\\Users\\cf\\.cursor\\ËÑöÊú¨ÂºÄÂèëÊ°ÜÊû∂\\CSDN-Optimize-Beautify-Simplify-0.2.20.user.js";
        const formattedPath = formatFilePath(testPath);
        console.log('ÂéüÂßãË∑ØÂæÑ:', testPath);
        console.log('Ê†ºÂºèÂåñÂêé:', formattedPath);
        return formattedPath;
    }

    // Âú®ÂàùÂßãÂåñÊó∂Ë∞ÉÁî®ÊµãËØï
    if (Framework.config.debugMode) {
        testFormatFilePath();
    }

    // Âú®Êñá‰ª∂Êú´Â∞æÊ∑ªÂä†ÂàùÂßãÂåñ‰ª£Á†Å
    // ÂàùÂßãÂåñÊ°ÜÊû∂
    if (typeof GM_addStyle !== 'undefined') {
        // Á°Æ‰øùÂú®È°µÈù¢Âä†ËΩΩÂÆåÊàêÂêéÂàùÂßãÂåñ
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', () => {
                window.ScriptFramework.InfoDisplay.init();
            });
        } else {
            window.ScriptFramework.InfoDisplay.init();
        }
    } else {
        console.error('GM_addStyle is not available. Please check if the required GM_ functions are granted.');
    }

    // ÂàùÂßãÂåñÊ°ÜÊû∂
    const scriptInfo = {
        name: GM_info.script.name || 'Ê®°ÂùóÂåñËÑöÊú¨ÂºÄÂèëÊ°ÜÊû∂',
        version: GM_info.script.version || '3.5',
        description: GM_info.script.description || ''
    };

    // Á°Æ‰øùÂú®DOMÂáÜÂ§áÂ•ΩÂêéÂàùÂßãÂåñ
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', () => {
            window.ScriptFramework.init(scriptInfo);
        });
    } else {
        window.ScriptFramework.init(scriptInfo);
    }

    // ÂØºÂá∫Ê°ÜÊû∂ÂØπË±°
    return window.ScriptFramework;
})();

// Âú®ÊñáÊ°£Âä†ËΩΩÂÆåÊàêÂêéÂàùÂßãÂåñÊ°ÜÊû∂
(function initializeFramework() {
    const scriptInfo = {
        name: GM_info.script.name || 'Ê®°ÂùóÂåñËÑöÊú¨ÂºÄÂèëÊ°ÜÊû∂',
        version: GM_info.script.version || '3.5',
        description: GM_info.script.description || '',
        author: GM_info.script.author || 'Êú™Áü•‰ΩúËÄÖ',
        matches: GM_info.script.matches || [],
        requires: GM_info.script.resources?.map(r => r.name) || []
    };

    function initialize() {
        try {
            Logger.info('ÂºÄÂßãÂàùÂßãÂåñÊ®°ÂùóÂåñËÑöÊú¨ÂºÄÂèëÊ°ÜÊû∂...');
            
            // ÂàùÂßãÂåñÊ°ÜÊû∂
            window.ScriptFramework.init(scriptInfo);
            
            // ÂàõÂª∫ÊÇ¨ÊµÆÂõæÊ†áÂíåÈù¢Êùø
            window.ScriptFramework.createToggleButton();
            
            Logger.info(`üöÄ ${scriptInfo.name} v${scriptInfo.version} ÂàùÂßãÂåñÂÆåÊàê`);
        } catch (error) {
            console.error('Ê°ÜÊû∂ÂàùÂßãÂåñÂ§±Ë¥•:', error);
        }
    }

    // Á°Æ‰øùÂú®DOMÂáÜÂ§áÂ•ΩÂêéÂàùÂßãÂåñ
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initialize);
    } else {
        initialize();
    }
})();
